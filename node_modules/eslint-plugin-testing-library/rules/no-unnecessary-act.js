"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RULE_NAME = void 0;
const create_testing_library_rule_1 = require("../create-testing-library-rule");
const node_utils_1 = require("../node-utils");
exports.RULE_NAME = 'no-unnecessary-act';
exports.default = create_testing_library_rule_1.createTestingLibraryRule({
    name: exports.RULE_NAME,
    meta: {
        type: 'problem',
        docs: {
            description: 'Disallow wrapping Testing Library utils or empty callbacks in `act`',
            category: 'Possible Errors',
            recommendedConfig: {
                dom: false,
                angular: false,
                react: false,
                vue: false,
            },
        },
        messages: {
            noUnnecessaryActTestingLibraryUtil: 'Avoid wrapping Testing Library util calls in `act`',
            noUnnecessaryActEmptyFunction: 'Avoid wrapping empty function in `act`',
        },
        schema: [],
    },
    defaultOptions: [],
    create(context, _, helpers) {
        function hasSomeNonTestingLibraryCall(statements) {
            return statements.some((statement) => {
                const callExpression = node_utils_1.getStatementCallExpression(statement);
                if (!callExpression) {
                    return false;
                }
                const identifier = node_utils_1.getDeepestIdentifierNode(callExpression);
                if (!identifier) {
                    return false;
                }
                return !helpers.isTestingLibraryUtil(identifier);
            });
        }
        function checkNoUnnecessaryActFromBlockStatement(blockStatementNode) {
            const functionNode = blockStatementNode.parent;
            const callExpressionNode = functionNode === null || functionNode === void 0 ? void 0 : functionNode.parent;
            if (!callExpressionNode || !functionNode) {
                return;
            }
            const identifierNode = node_utils_1.getDeepestIdentifierNode(callExpressionNode);
            if (!identifierNode) {
                return;
            }
            if (!helpers.isActUtil(identifierNode)) {
                return;
            }
            if (node_utils_1.isEmptyFunction(functionNode)) {
                context.report({
                    node: identifierNode,
                    messageId: 'noUnnecessaryActEmptyFunction',
                });
            }
            else if (!hasSomeNonTestingLibraryCall(blockStatementNode.body)) {
                context.report({
                    node: identifierNode,
                    messageId: 'noUnnecessaryActTestingLibraryUtil',
                });
            }
        }
        function checkNoUnnecessaryActFromImplicitReturn(node) {
            var _a;
            const nodeIdentifier = node_utils_1.getDeepestIdentifierNode(node);
            if (!nodeIdentifier) {
                return;
            }
            const parentCallExpression = (_a = node.parent) === null || _a === void 0 ? void 0 : _a.parent;
            if (!parentCallExpression) {
                return;
            }
            const identifierNode = node_utils_1.getDeepestIdentifierNode(parentCallExpression);
            if (!identifierNode) {
                return;
            }
            if (!helpers.isActUtil(identifierNode)) {
                return;
            }
            if (!helpers.isTestingLibraryUtil(nodeIdentifier)) {
                return;
            }
            context.report({
                node: identifierNode,
                messageId: 'noUnnecessaryActTestingLibraryUtil',
            });
        }
        return {
            'CallExpression > ArrowFunctionExpression > BlockStatement': checkNoUnnecessaryActFromBlockStatement,
            'CallExpression > FunctionExpression > BlockStatement': checkNoUnnecessaryActFromBlockStatement,
            'CallExpression > ArrowFunctionExpression > CallExpression': checkNoUnnecessaryActFromImplicitReturn,
        };
    },
});
