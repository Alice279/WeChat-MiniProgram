"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MAPPING_TO_USER_EVENT = exports.UserEventMethods = exports.RULE_NAME = void 0;
const create_testing_library_rule_1 = require("../create-testing-library-rule");
const node_utils_1 = require("../node-utils");
exports.RULE_NAME = 'prefer-user-event';
exports.UserEventMethods = [
    'click',
    'dblClick',
    'type',
    'upload',
    'clear',
    'selectOptions',
    'deselectOptions',
    'tab',
    'hover',
    'unhover',
    'paste',
];
exports.MAPPING_TO_USER_EVENT = {
    click: ['click', 'type', 'selectOptions', 'deselectOptions'],
    change: ['upload', 'type', 'clear', 'selectOptions', 'deselectOptions'],
    dblClick: ['dblClick'],
    input: ['type', 'upload', 'selectOptions', 'deselectOptions', 'paste'],
    keyDown: ['type', 'tab'],
    keyPress: ['type'],
    keyUp: ['type', 'tab'],
    mouseDown: ['click', 'dblClick', 'selectOptions', 'deselectOptions'],
    mouseEnter: ['hover', 'selectOptions', 'deselectOptions'],
    mouseLeave: ['unhover'],
    mouseMove: ['hover', 'unhover', 'selectOptions', 'deselectOptions'],
    mouseOut: ['unhover'],
    mouseOver: ['hover', 'selectOptions', 'deselectOptions'],
    mouseUp: ['click', 'dblClick', 'selectOptions', 'deselectOptions'],
    paste: ['paste'],
    pointerDown: ['click', 'dblClick', 'selectOptions', 'deselectOptions'],
    pointerEnter: ['hover', 'selectOptions', 'deselectOptions'],
    pointerLeave: ['unhover'],
    pointerMove: ['hover', 'unhover', 'selectOptions', 'deselectOptions'],
    pointerOut: ['unhover'],
    pointerOver: ['hover', 'selectOptions', 'deselectOptions'],
    pointerUp: ['click', 'dblClick', 'selectOptions', 'deselectOptions'],
};
function buildErrorMessage(fireEventMethod) {
    const userEventMethods = exports.MAPPING_TO_USER_EVENT[fireEventMethod].map((methodName) => `userEvent.${methodName}`);
    return userEventMethods.join(', ').replace(/, ([a-zA-Z.]+)$/, ', or $1');
}
const fireEventMappedMethods = Object.keys(exports.MAPPING_TO_USER_EVENT);
exports.default = create_testing_library_rule_1.createTestingLibraryRule({
    name: exports.RULE_NAME,
    meta: {
        type: 'suggestion',
        docs: {
            description: 'Suggest using userEvent over fireEvent',
            category: 'Best Practices',
            recommendedConfig: {
                dom: false,
                angular: false,
                react: false,
                vue: false,
            },
        },
        messages: {
            preferUserEvent: 'Prefer using {{userEventMethods}} over fireEvent.{{fireEventMethod}}',
        },
        schema: [
            {
                type: 'object',
                properties: {
                    allowedMethods: { type: 'array' },
                },
            },
        ],
    },
    defaultOptions: [{ allowedMethods: [] }],
    create(context, [options], helpers) {
        const { allowedMethods } = options;
        return {
            'CallExpression Identifier'(node) {
                if (!helpers.isFireEventMethod(node)) {
                    return;
                }
                const closestCallExpression = node_utils_1.findClosestCallExpressionNode(node, true);
                if (!closestCallExpression) {
                    return;
                }
                const fireEventMethodName = node.name;
                if (!fireEventMappedMethods.includes(fireEventMethodName) ||
                    allowedMethods.includes(fireEventMethodName)) {
                    return;
                }
                context.report({
                    node: closestCallExpression.callee,
                    messageId: 'preferUserEvent',
                    data: {
                        userEventMethods: buildErrorMessage(fireEventMethodName),
                        fireEventMethod: fireEventMethodName,
                    },
                });
            },
        };
    },
});
