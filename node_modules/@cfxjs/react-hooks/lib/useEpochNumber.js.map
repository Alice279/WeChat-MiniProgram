{"version":3,"sources":["../src/useEpochNumber.js"],"names":["EPOCH_NUMBER_UPDATED_EVENT_DATA","detail","undefined","EPOCH_NUMBER_UPDATED_EVENT","CustomEvent","dispatchEpochNumberUpdated","window","confluxJS","getEpochNumber","then","epochNumber","dispatchEvent","setupEpochListener","interval","__EPOCH_NUMBER_UPDATED_EVENT_INTERVAL","clearInterval","setInterval","useEpochNumber","confluxJSDefined","setEpochNumber","useEpochNumberFn","cb"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAIA,+BAA+B,GAAG;AAAEC,EAAAA,MAAM,EAAEC;AAAV,CAAtC;AACA,MAAMC,0BAA0B,GAAG,IAAIC,WAAJ,CACjC,oBADiC,EAEjCJ,+BAFiC,CAAnC;;AAKA,SAASK,0BAAT,GAAsC;AAAA;;AACpC,aAAAC,MAAM,UAAN,+DAAQC,SAAR,iGAAmBC,cAAnB,kFAAqCC,IAArC,CAA2CC,WAAD,IAAiB;AACzD,QAAIV,+BAA+B,CAACC,MAAhC,KAA2CS,WAA/C,EAA4D;AAC5DV,IAAAA,+BAA+B,CAACC,MAAhC,GAAyCS,WAAzC;AACAJ,IAAAA,MAAM,CAACK,aAAP,CAAqBR,0BAArB;AACD,GAJD;AAKD;AAED;AACA;AACA;AACA;;;AACO,SAASS,kBAAT,CAA4BC,QAAQ,GAAG,IAAvC,EAA6C;AAClD,MAAI,CAACP,MAAD,IAAW,CAACA,MAAM,CAACC,SAAvB,EAAkC;AAClC,MAAID,MAAM,CAACQ,qCAAP,KAAiDZ,SAArD,EACEa,aAAa,CAACD,qCAAD,CAAb;AACFT,EAAAA,0BAA0B;AAC1BC,EAAAA,MAAM,CAACQ,qCAAP,GAA+CE,WAAW,CACxDX,0BADwD,EAExDQ,QAFwD,CAA1D;AAID;AAED;AACA;AACA;AACA;;;AACO,SAASI,cAAT,GAA0B;AAC/B,QAAMC,gBAAgB,GAAG,4BAAzB;AACA,wBAAU,MAAM;AACd,QAAIA,gBAAJ,EAAsBN,kBAAkB;AACzC,GAFD,EAEG,CAACM,gBAAD,CAFH;AAIA,QAAM,CAACR,WAAD,EAAcS,cAAd,IAAgC,qBACpCnB,+BAA+B,CAACC,MADI,CAAtC;AAGA,0BAAS,oBAAT,EAA+B,MAAM;AACnCkB,IAAAA,cAAc,CAACnB,+BAA+B,CAACC,MAAjC,CAAd;AACD,GAFD;AAIA,SAAOS,WAAP;AACD;;AAEM,MAAMU,gBAAgB,GAAIC,EAAD,IAC9B,wBAAS,oBAAT,EAA+BA,EAAE,CAACrB,+BAA+B,CAACC,MAAjC,CAAjC,CADK","sourcesContent":["import { useEvent } from \"react-use\";\nimport { useState, useEffect } from \"react\";\nimport { useConfluxJSDefined } from \"./\";\n\nlet EPOCH_NUMBER_UPDATED_EVENT_DATA = { detail: undefined };\nconst EPOCH_NUMBER_UPDATED_EVENT = new CustomEvent(\n  \"epochNumberUpdated\",\n  EPOCH_NUMBER_UPDATED_EVENT_DATA\n);\n\nfunction dispatchEpochNumberUpdated() {\n  window?.confluxJS?.getEpochNumber()?.then((epochNumber) => {\n    if (EPOCH_NUMBER_UPDATED_EVENT_DATA.detail === epochNumber) return;\n    EPOCH_NUMBER_UPDATED_EVENT_DATA.detail = epochNumber;\n    window.dispatchEvent(EPOCH_NUMBER_UPDATED_EVENT);\n  });\n}\n\n/**\n * setup a listener to trigger a epochNumberUpdated event\n * @param {number=3000} interval the interval to detect epoch number change\n */\nexport function setupEpochListener(interval = 3000) {\n  if (!window || !window.confluxJS) return;\n  if (window.__EPOCH_NUMBER_UPDATED_EVENT_INTERVAL !== undefined)\n    clearInterval(__EPOCH_NUMBER_UPDATED_EVENT_INTERVAL);\n  dispatchEpochNumberUpdated();\n  window.__EPOCH_NUMBER_UPDATED_EVENT_INTERVAL = setInterval(\n    dispatchEpochNumberUpdated,\n    interval\n  );\n}\n\n/**\n * hook to get the current epoch number, trigger rerender when epoch number changes\n * @returns {number|undefined} current epoch number or undefined\n */\nexport function useEpochNumber() {\n  const confluxJSDefined = useConfluxJSDefined();\n  useEffect(() => {\n    if (confluxJSDefined) setupEpochListener();\n  }, [confluxJSDefined]);\n\n  const [epochNumber, setEpochNumber] = useState(\n    EPOCH_NUMBER_UPDATED_EVENT_DATA.detail\n  );\n  useEvent(\"epochNumberUpdated\", () => {\n    setEpochNumber(EPOCH_NUMBER_UPDATED_EVENT_DATA.detail);\n  });\n\n  return epochNumber;\n}\n\nexport const useEpochNumberFn = (cb) =>\n  useEvent(\"epochNumberUpdated\", cb(EPOCH_NUMBER_UPDATED_EVENT_DATA.detail));\n"],"file":"useEpochNumber.js"}