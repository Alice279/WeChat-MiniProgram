{"version":3,"sources":["../src/useBalance.js"],"names":["UPDATE_USER_BALANCE_SWR_ID","c","abi","SINGLE_CALL_BALANCES_ABI","address","window","confluxJS","getTokensBalance","userAddr","tokenAddrs","balances","call","useBalance","confluxJSDefined","chainId","_feedAddressNetId","Boolean","data","balance","tokenBalances","error","balanceErr","toString","initialData","map","revalidateOnMount","console","message"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;AAEO,MAAMA,0BAA0B,GAAG,4BAAnC;;AAEP,IAAIC,CAAC,GAAG,2BAAa;AACnBC,EAAAA,GAAG,EAAEC,uCADc;AAEnBC,EAAAA,OAAO,EAAE;AAFU,CAAb,aAGLC,MAHK,4CAGL,QAAQC,SAHH,CAAR;;AAKA,SAASC,gBAAT,CAA0BC,QAA1B,EAAoCC,UAApC,EAAgD;AAAA;;AAC9C,eAAOR,CAAP,sDAAO,GACLS,QADK,CAEL,CAACF,QAAD,CAFK,EAGL,CAAC,4CAAD,EAA+C,GAAGC,UAAlD,CAHK,CAAP,gDAAO,YAKLE,IALK,EAAP;AAMD;;AAEc,SAASC,UAAT,CAAoBJ,QAApB,EAA8BC,UAA9B,EAA0C;AACvD,QAAMI,gBAAgB,GAAG,4BAAzB;AACA,QAAM;AAACC,IAAAA;AAAD,MAAY,sBAAlB;AAEA,wBAAU,MAAM;AACd,QAAI,CAACD,gBAAD,IAAqB,CAACC,OAA1B,EAAmC;;AACnC,QAAIb,CAAJ,EAAO;AACLA,MAAAA,CAAC,CAACc,iBAAF,CAAoBZ,uCAApB,EAA8CE,MAAM,CAACC,SAArD;AACD,KAFD,MAEO;AACLL,MAAAA,CAAC,GAAG,2BAAa;AACfC,QAAAA,GAAG,EAAEC,uCADU;AAEfC,QAAAA,OAAO,EAAE;AAFM,OAAb,EAGDC,MAAM,CAACC,SAHN,CAAJ;AAID;AACF,GAVD,EAUG,CAACO,gBAAD,EAAmBG,OAAO,CAACF,OAAD,CAA1B,CAVH;AAYA,QAAM;AACJG,IAAAA,IAAI,EAAE,CAACC,OAAD,EAAU,GAAGC,aAAb,CADF;AAEJC,IAAAA,KAAK,EAAEC;AAFH,MAGF,yBACFb,QAAQ,GACJ,CAACR,0BAAD,EAA6BQ,QAA7B,EAAuCC,UAAU,CAACa,QAAX,EAAvC,CADI,GAEJ,IAHF,EAIF,MAAMf,gBAAgB,CAACC,QAAD,EAAWC,UAAX,CAJpB,EAKF;AAAEc,IAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,GAAGd,UAAU,CAACe,GAAX,CAAe,MAAM,CAArB,CAAP,CAAf;AAAgDC,IAAAA,iBAAiB,EAAE;AAAnE,GALE,CAHJ;AAWA,MAAIJ,UAAJ,EAAgBK,OAAO,CAACN,KAAR,CAAe,sBAAqBC,UAAU,CAACM,OAAQ,EAAvD;AAEhB,SAAO,CAACT,OAAD,EAAUC,aAAV,CAAP;AACD","sourcesContent":["import SINGLE_CALL_BALANCES_ABI from \"./contracts/cfx-single-call-balance-checker-abi.json\";\nimport { useEffect } from \"react\";\nimport { useConfluxJSDefined, useEpochNumberSWR } from \"./\";\nimport { useChainNetId } from './';\nimport initContract from \"./initContract\";\n\nexport const UPDATE_USER_BALANCE_SWR_ID = \"UPDATE_USER_BALANCE_SWR_ID\";\n\nlet c = initContract({\n  abi: SINGLE_CALL_BALANCES_ABI,\n  address: \"0x8f35930629fce5b5cf4cd762e71006045bfeb24d\",\n}, window?.confluxJS);\n\nfunction getTokensBalance(userAddr, tokenAddrs) {\n  return c\n  ?.balances(\n    [userAddr],\n    [\"0x0000000000000000000000000000000000000000\", ...tokenAddrs]\n  )\n  ?.call();\n}\n\nexport default function useBalance(userAddr, tokenAddrs) {\n  const confluxJSDefined = useConfluxJSDefined();\n  const {chainId} = useChainNetId()\n\n  useEffect(() => {\n    if (!confluxJSDefined || !chainId) return\n    if (c) {\n      c._feedAddressNetId(SINGLE_CALL_BALANCES_ABI, window.confluxJS)\n    } else {\n      c = initContract({\n        abi: SINGLE_CALL_BALANCES_ABI,\n        address: \"0x8f35930629fce5b5cf4cd762e71006045bfeb24d\",\n      }, window.confluxJS);\n    }\n  }, [confluxJSDefined, Boolean(chainId)]);\n\n  const {\n    data: [balance, ...tokenBalances],\n    error: balanceErr,\n  } = useEpochNumberSWR(\n    userAddr\n      ? [UPDATE_USER_BALANCE_SWR_ID, userAddr, tokenAddrs.toString()]\n      : null,\n    () => getTokensBalance(userAddr, tokenAddrs),\n    { initialData: [0, ...tokenAddrs.map(() => 0)], revalidateOnMount: true }\n  );\n\n  if (balanceErr) console.error(`Get Balance Error: ${balanceErr.message}`);\n\n  return [balance, tokenBalances];\n}\n"],"file":"useBalance.js"}