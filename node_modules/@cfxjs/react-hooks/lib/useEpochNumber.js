"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setupEpochListener = setupEpochListener;
exports.useEpochNumber = useEpochNumber;
exports.useEpochNumberFn = void 0;

var _reactUse = require("react-use");

var _react = require("react");

var _ = require("./");

let EPOCH_NUMBER_UPDATED_EVENT_DATA = {
  detail: undefined
};
const EPOCH_NUMBER_UPDATED_EVENT = new CustomEvent("epochNumberUpdated", EPOCH_NUMBER_UPDATED_EVENT_DATA);

function dispatchEpochNumberUpdated() {
  var _window, _window$confluxJS, _window$confluxJS$get;

  (_window = window) === null || _window === void 0 ? void 0 : (_window$confluxJS = _window.confluxJS) === null || _window$confluxJS === void 0 ? void 0 : (_window$confluxJS$get = _window$confluxJS.getEpochNumber()) === null || _window$confluxJS$get === void 0 ? void 0 : _window$confluxJS$get.then(epochNumber => {
    if (EPOCH_NUMBER_UPDATED_EVENT_DATA.detail === epochNumber) return;
    EPOCH_NUMBER_UPDATED_EVENT_DATA.detail = epochNumber;
    window.dispatchEvent(EPOCH_NUMBER_UPDATED_EVENT);
  });
}
/**
 * setup a listener to trigger a epochNumberUpdated event
 * @param {number=3000} interval the interval to detect epoch number change
 */


function setupEpochListener(interval = 3000) {
  if (!window || !window.confluxJS) return;
  if (window.__EPOCH_NUMBER_UPDATED_EVENT_INTERVAL !== undefined) clearInterval(__EPOCH_NUMBER_UPDATED_EVENT_INTERVAL);
  dispatchEpochNumberUpdated();
  window.__EPOCH_NUMBER_UPDATED_EVENT_INTERVAL = setInterval(dispatchEpochNumberUpdated, interval);
}
/**
 * hook to get the current epoch number, trigger rerender when epoch number changes
 * @returns {number|undefined} current epoch number or undefined
 */


function useEpochNumber() {
  const confluxJSDefined = (0, _.useConfluxJSDefined)();
  (0, _react.useEffect)(() => {
    if (confluxJSDefined) setupEpochListener();
  }, [confluxJSDefined]);
  const [epochNumber, setEpochNumber] = (0, _react.useState)(EPOCH_NUMBER_UPDATED_EVENT_DATA.detail);
  (0, _reactUse.useEvent)("epochNumberUpdated", () => {
    setEpochNumber(EPOCH_NUMBER_UPDATED_EVENT_DATA.detail);
  });
  return epochNumber;
}

const useEpochNumberFn = cb => (0, _reactUse.useEvent)("epochNumberUpdated", cb(EPOCH_NUMBER_UPDATED_EVENT_DATA.detail));

exports.useEpochNumberFn = useEpochNumberFn;
//# sourceMappingURL=useEpochNumber.js.map