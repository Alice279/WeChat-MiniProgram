"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useConfluxPortal;

var _react = require("react");

var _reactUse = require("react-use");

var _ = require("./");

function openHomePage() {
  window.open("https://portal.confluxnetwork.org");
}

function validAddresses(addresses) {
  return Array.isArray(addresses) && addresses.length;
}

const isPortalInstalled = () => {
  var _window, _window$conflux;

  return (_window = window) === null || _window === void 0 ? void 0 : (_window$conflux = _window.conflux) === null || _window$conflux === void 0 ? void 0 : _window$conflux.isConfluxPortal;
};

function useConfluxPortal(tokenAddrs = []) {
  var _window6, _window7;

  (0, _.useConfluxJSDefined)(); // prevent portal auto refresh when user changes the network

  if (window && window.conflux && window.conflux.autoRefreshOnNetworkChange) window.conflux.autoRefreshOnNetworkChange = false;
  if (!window.conflux && window.localStorage.getItem("CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE")) window.localStorage.removeItem("CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE");
  const [address, setAddress] = (0, _react.useState)( // NOTE: if portal is installed, there must be window.conflux here
  window.conflux ? window.localStorage.getItem("CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE") || undefined : null);
  const {
    chainId,
    networkId
  } = (0, _.useChainNetId)();
  const [error, setError] = (0, _react.useState)(null);
  (0, _reactUse.useEffectOnce)(() => {
    var _window2, _window2$conflux;

    (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$conflux = _window2.conflux) === null || _window2$conflux === void 0 ? void 0 : _window2$conflux.send({
      method: "cfx_accounts"
    }).then(accounts => {
      if (validAddresses(accounts)) {
        setAddress(accounts[0]);
        window.localStorage.setItem("CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE", accounts[0]);
      } else {
        window.localStorage.removeItem("CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE");
        setAddress(null);
      }
    });
  });

  const login = async fallbackFn => {
    var _window3;

    if (!((_window3 = window) === null || _window3 === void 0 ? void 0 : _window3.conflux)) return;
    const hasAddr = !!address && (await window.conflux.send('cfx_accounts')).length;
    if (hasAddr) return typeof fallbackFn === 'function' ? fallbackFn() : undefined;
    return window.conflux.send('cfx_requestAccounts').then(addresses => validAddresses(addresses) && setAddress(addresses[0])).catch(error => setError(error));
    return typeof fallbackFn === "function" && fallbackFn();
  };

  const useEnsurePortalLogin = () => {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    (0, _reactUse.useEffectOnce)(login);
  };

  const [balance, tokenBalances] = (0, _.useBalance)(address, tokenAddrs); // eslint-disable-next-line react-hooks/rules-of-hooks

  (0, _reactUse.useEffectOnce)(() => {
    var _window4, _window4$conflux;

    const accountListener = newAccounts => {
      if (validAddresses(newAccounts)) {
        window.localStorage.setItem("CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE", newAccounts[0]);
        setAddress(newAccounts[0]);
      } else {
        if (address !== null) setAddress(null);
        window.localStorage.removeItem("CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE");
      }
    };

    (_window4 = window) === null || _window4 === void 0 ? void 0 : (_window4$conflux = _window4.conflux) === null || _window4$conflux === void 0 ? void 0 : _window4$conflux.on("accountsChanged", accountListener);
    return () => {
      var _window5, _window5$conflux;

      (_window5 = window) === null || _window5 === void 0 ? void 0 : (_window5$conflux = _window5.conflux) === null || _window5$conflux === void 0 ? void 0 : _window5$conflux.off("accountsChanged", accountListener);
    };
  });
  return {
    portalInstalled: Boolean(isPortalInstalled()),
    address,
    balances: [balance, tokenBalances],
    networkId,
    chainId,
    error,
    login,
    useEnsurePortalLogin,
    conflux: (_window6 = window) === null || _window6 === void 0 ? void 0 : _window6.conflux,
    confluxJS: (_window7 = window) === null || _window7 === void 0 ? void 0 : _window7.confluxJS
  };
}

useConfluxPortal.openHomePage = openHomePage;
//# sourceMappingURL=useConfluxPortal.js.map