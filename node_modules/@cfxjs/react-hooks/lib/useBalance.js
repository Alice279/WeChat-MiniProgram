"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useBalance;
exports.UPDATE_USER_BALANCE_SWR_ID = void 0;

var _cfxSingleCallBalanceCheckerAbi = _interopRequireDefault(require("./contracts/cfx-single-call-balance-checker-abi.json"));

var _react = require("react");

var _ = require("./");

var _initContract = _interopRequireDefault(require("./initContract"));

var _window;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const UPDATE_USER_BALANCE_SWR_ID = "UPDATE_USER_BALANCE_SWR_ID";
exports.UPDATE_USER_BALANCE_SWR_ID = UPDATE_USER_BALANCE_SWR_ID;
let c = (0, _initContract.default)({
  abi: _cfxSingleCallBalanceCheckerAbi.default,
  address: "0x8f35930629fce5b5cf4cd762e71006045bfeb24d"
}, (_window = window) === null || _window === void 0 ? void 0 : _window.confluxJS);

function getTokensBalance(userAddr, tokenAddrs) {
  var _c, _c$balances;

  return (_c = c) === null || _c === void 0 ? void 0 : (_c$balances = _c.balances([userAddr], ["0x0000000000000000000000000000000000000000", ...tokenAddrs])) === null || _c$balances === void 0 ? void 0 : _c$balances.call();
}

function useBalance(userAddr, tokenAddrs) {
  const confluxJSDefined = (0, _.useConfluxJSDefined)();
  const {
    chainId
  } = (0, _.useChainNetId)();
  (0, _react.useEffect)(() => {
    if (!confluxJSDefined || !chainId) return;

    if (c) {
      c._feedAddressNetId(_cfxSingleCallBalanceCheckerAbi.default, window.confluxJS);
    } else {
      c = (0, _initContract.default)({
        abi: _cfxSingleCallBalanceCheckerAbi.default,
        address: "0x8f35930629fce5b5cf4cd762e71006045bfeb24d"
      }, window.confluxJS);
    }
  }, [confluxJSDefined, Boolean(chainId)]);
  const {
    data: [balance, ...tokenBalances],
    error: balanceErr
  } = (0, _.useEpochNumberSWR)(userAddr ? [UPDATE_USER_BALANCE_SWR_ID, userAddr, tokenAddrs.toString()] : null, () => getTokensBalance(userAddr, tokenAddrs), {
    initialData: [0, ...tokenAddrs.map(() => 0)],
    revalidateOnMount: true
  });
  if (balanceErr) console.error(`Get Balance Error: ${balanceErr.message}`);
  return [balance, tokenBalances];
}
//# sourceMappingURL=useBalance.js.map