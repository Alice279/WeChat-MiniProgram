{"ast":null,"code":"const timeout = 6000;\nimport { ProxyUrlPrefix } from '../constants';\n/**\n * request the remote api\n * @param {*} url\n * @param {*} method rpc method\n * @param {*} params body params\n * @returns\n */\n\nexport default function jsonRpc(url, method, params) {\n  const data = {\n    id: 1,\n    jsonrpc: '2.0',\n    method,\n    params\n  };\n  return fetch(url, {\n    method: 'POST',\n    // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors',\n    // no-cors, *cors, same-origin\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data),\n    // body data type must match \"Content-Type\" header\n    timeout\n  }).then(response => {\n    if (!response.ok) {\n      const error = new Error('An error occurred while fetching the data.');\n      error.info = response.json();\n      error.status = response.status;\n      throw error;\n    }\n\n    return response.json();\n  }).then(data => {\n    return data.result;\n  });\n}\n/**\n * request the remote url based on the 'shuttleflow' prefix\n * @returns\n */\n\nexport function requestSf(method, params) {\n  return jsonRpc(ProxyUrlPrefix.shuttleflow, method, params);\n}\n/**\n * request the remote url based on the 'sponsor' prefix\n * @returns\n */\n\nexport function requestSponsor(method, params) {\n  return jsonRpc(ProxyUrlPrefix.sponsor, method, params);\n}","map":{"version":3,"sources":["/Users/alice/Documents/rigel/src/utils/request.js"],"names":["timeout","ProxyUrlPrefix","jsonRpc","url","method","params","data","id","jsonrpc","fetch","mode","headers","body","JSON","stringify","then","response","ok","error","Error","info","json","status","result","requestSf","shuttleflow","requestSponsor","sponsor"],"mappings":"AAAA,MAAMA,OAAO,GAAG,IAAhB;AACA,SAAQC,cAAR,QAA6B,cAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,OAAT,CAAiBC,GAAjB,EAAsBC,MAAtB,EAA8BC,MAA9B,EAAsC;AACnD,QAAMC,IAAI,GAAG;AAACC,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,OAAO,EAAE,KAAjB;AAAwBJ,IAAAA,MAAxB;AAAgCC,IAAAA;AAAhC,GAAb;AACA,SAAOI,KAAK,CAACN,GAAD,EAAM;AAChBC,IAAAA,MAAM,EAAE,MADQ;AACA;AAChBM,IAAAA,IAAI,EAAE,MAFU;AAEF;AACdC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAHO;AAMhBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf,CANU;AAMY;AAC5BN,IAAAA;AAPgB,GAAN,CAAL,CASJe,IATI,CASCC,QAAQ,IAAI;AAChB,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,YAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAU,4CAAV,CAAd;AACAD,MAAAA,KAAK,CAACE,IAAN,GAAaJ,QAAQ,CAACK,IAAT,EAAb;AACAH,MAAAA,KAAK,CAACI,MAAN,GAAeN,QAAQ,CAACM,MAAxB;AACA,YAAMJ,KAAN;AACD;;AACD,WAAOF,QAAQ,CAACK,IAAT,EAAP;AACD,GAjBI,EAkBJN,IAlBI,CAkBCT,IAAI,IAAI;AACZ,WAAOA,IAAI,CAACiB,MAAZ;AACD,GApBI,CAAP;AAqBD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBpB,MAAnB,EAA2BC,MAA3B,EAAmC;AACxC,SAAOH,OAAO,CAACD,cAAc,CAACwB,WAAhB,EAA6BrB,MAA7B,EAAqCC,MAArC,CAAd;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASqB,cAAT,CAAwBtB,MAAxB,EAAgCC,MAAhC,EAAwC;AAC7C,SAAOH,OAAO,CAACD,cAAc,CAAC0B,OAAhB,EAAyBvB,MAAzB,EAAiCC,MAAjC,CAAd;AACD","sourcesContent":["const timeout = 6000\nimport {ProxyUrlPrefix} from '../constants'\n\n/**\n * request the remote api\n * @param {*} url\n * @param {*} method rpc method\n * @param {*} params body params\n * @returns\n */\nexport default function jsonRpc(url, method, params) {\n  const data = {id: 1, jsonrpc: '2.0', method, params}\n  return fetch(url, {\n    method: 'POST', // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors', // no-cors, *cors, same-origin\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n    timeout,\n  })\n    .then(response => {\n      if (!response.ok) {\n        const error = new Error('An error occurred while fetching the data.')\n        error.info = response.json()\n        error.status = response.status\n        throw error\n      }\n      return response.json()\n    })\n    .then(data => {\n      return data.result\n    })\n}\n\n/**\n * request the remote url based on the 'shuttleflow' prefix\n * @returns\n */\nexport function requestSf(method, params) {\n  return jsonRpc(ProxyUrlPrefix.shuttleflow, method, params)\n}\n\n/**\n * request the remote url based on the 'sponsor' prefix\n * @returns\n */\nexport function requestSponsor(method, params) {\n  return jsonRpc(ProxyUrlPrefix.sponsor, method, params)\n}\n"]},"metadata":{},"sourceType":"module"}