{"ast":null,"code":"var _process$env$REACT_AP;\n\nimport { Web3Provider } from '@ethersproject/providers';\nimport { Contract } from '@ethersproject/contracts';\nimport { AddressZero } from '@ethersproject/constants';\nimport { getAddress } from '@ethersproject/address';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { NetworkConnector } from './NetworkConnector';\nimport { SupportedChainIdsWeb3 } from '../constants/chainConfig';\nconst NETWORK_URL = process.env.REACT_APP_NETWORK_URL;\nexport const NETWORK_CHAIN_ID = parseInt((_process$env$REACT_AP = process.env.REACT_APP_CHAIN_ID) !== null && _process$env$REACT_AP !== void 0 ? _process$env$REACT_AP : '1');\n\nif (typeof NETWORK_URL === 'undefined') {\n  throw new Error(`REACT_APP_NETWORK_URL must be a defined environment variable`);\n}\n\nexport const network = new NetworkConnector({\n  urls: {\n    [NETWORK_CHAIN_ID]: NETWORK_URL\n  }\n});\nlet networkLibrary;\nexport function getNetworkLibrary() {\n  var _networkLibrary;\n\n  return networkLibrary = (_networkLibrary = networkLibrary) !== null && _networkLibrary !== void 0 ? _networkLibrary : new Web3Provider(network.provider);\n}\nexport const injected = new InjectedConnector({\n  supportedChainIds: SupportedChainIdsWeb3\n});\nexport function isAddress(value) {\n  try {\n    return getAddress(value);\n  } catch {\n    return false;\n  }\n} // account is not optional\n\nexport function getSigner(library, account) {\n  return library.getSigner(account).connectUnchecked();\n} // account is optional\n\nexport function getProviderOrSigner(library, account) {\n  return account ? getSigner(library, account) : library;\n} // account is optional\n\nexport function getContract(address, ABI, library, account) {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account));\n}","map":{"version":3,"sources":["/Users/alice/Documents/rigel/src/utils/web3.js"],"names":["Web3Provider","Contract","AddressZero","getAddress","InjectedConnector","NetworkConnector","SupportedChainIdsWeb3","NETWORK_URL","process","env","REACT_APP_NETWORK_URL","NETWORK_CHAIN_ID","parseInt","REACT_APP_CHAIN_ID","Error","network","urls","networkLibrary","getNetworkLibrary","provider","injected","supportedChainIds","isAddress","value","getSigner","library","account","connectUnchecked","getProviderOrSigner","getContract","address","ABI"],"mappings":";;AAAA,SAAQA,YAAR,QAA2B,0BAA3B;AACA,SAAQC,QAAR,QAAuB,0BAAvB;AACA,SAAQC,WAAR,QAA0B,0BAA1B;AACA,SAAQC,UAAR,QAAyB,wBAAzB;AACA,SAAQC,iBAAR,QAAgC,gCAAhC;AACA,SAAQC,gBAAR,QAA+B,oBAA/B;AACA,SAAQC,qBAAR,QAAoC,0BAApC;AAEA,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,qBAAhC;AAEA,OAAO,MAAMC,gBAAgB,GAAGC,QAAQ,0BAACJ,OAAO,CAACC,GAAR,CAAYI,kBAAb,yEAAmC,GAAnC,CAAjC;;AAEP,IAAI,OAAON,WAAP,KAAuB,WAA3B,EAAwC;AACtC,QAAM,IAAIO,KAAJ,CACH,8DADG,CAAN;AAGD;;AAED,OAAO,MAAMC,OAAO,GAAG,IAAIV,gBAAJ,CAAqB;AAC1CW,EAAAA,IAAI,EAAE;AAAC,KAACL,gBAAD,GAAoBJ;AAArB;AADoC,CAArB,CAAhB;AAIP,IAAIU,cAAJ;AACA,OAAO,SAASC,iBAAT,GAA6B;AAAA;;AAClC,SAAQD,cAAc,sBAAGA,cAAH,6DAAqB,IAAIjB,YAAJ,CAAiBe,OAAO,CAACI,QAAzB,CAA3C;AACD;AAED,OAAO,MAAMC,QAAQ,GAAG,IAAIhB,iBAAJ,CAAsB;AAC5CiB,EAAAA,iBAAiB,EAAEf;AADyB,CAAtB,CAAjB;AAIP,OAAO,SAASgB,SAAT,CAAmBC,KAAnB,EAA0B;AAC/B,MAAI;AACF,WAAOpB,UAAU,CAACoB,KAAD,CAAjB;AACD,GAFD,CAEE,MAAM;AACN,WAAO,KAAP;AACD;AACF,C,CAED;;AACA,OAAO,SAASC,SAAT,CAAmBC,OAAnB,EAA4BC,OAA5B,EAAqC;AAC1C,SAAOD,OAAO,CAACD,SAAR,CAAkBE,OAAlB,EAA2BC,gBAA3B,EAAP;AACD,C,CAED;;AACA,OAAO,SAASC,mBAAT,CAA6BH,OAA7B,EAAsCC,OAAtC,EAA+C;AACpD,SAAOA,OAAO,GAAGF,SAAS,CAACC,OAAD,EAAUC,OAAV,CAAZ,GAAiCD,OAA/C;AACD,C,CAED;;AACA,OAAO,SAASI,WAAT,CAAqBC,OAArB,EAA8BC,GAA9B,EAAmCN,OAAnC,EAA4CC,OAA5C,EAAqD;AAC1D,MAAI,CAACJ,SAAS,CAACQ,OAAD,CAAV,IAAuBA,OAAO,KAAK5B,WAAvC,EAAoD;AAClD,UAAMY,KAAK,CAAE,gCAA+BgB,OAAQ,IAAzC,CAAX;AACD;;AAED,SAAO,IAAI7B,QAAJ,CAAa6B,OAAb,EAAsBC,GAAtB,EAA2BH,mBAAmB,CAACH,OAAD,EAAUC,OAAV,CAA9C,CAAP;AACD","sourcesContent":["import {Web3Provider} from '@ethersproject/providers'\nimport {Contract} from '@ethersproject/contracts'\nimport {AddressZero} from '@ethersproject/constants'\nimport {getAddress} from '@ethersproject/address'\nimport {InjectedConnector} from '@web3-react/injected-connector'\nimport {NetworkConnector} from './NetworkConnector'\nimport {SupportedChainIdsWeb3} from '../constants/chainConfig'\n\nconst NETWORK_URL = process.env.REACT_APP_NETWORK_URL\n\nexport const NETWORK_CHAIN_ID = parseInt(process.env.REACT_APP_CHAIN_ID ?? '1')\n\nif (typeof NETWORK_URL === 'undefined') {\n  throw new Error(\n    `REACT_APP_NETWORK_URL must be a defined environment variable`,\n  )\n}\n\nexport const network = new NetworkConnector({\n  urls: {[NETWORK_CHAIN_ID]: NETWORK_URL},\n})\n\nlet networkLibrary\nexport function getNetworkLibrary() {\n  return (networkLibrary = networkLibrary ?? new Web3Provider(network.provider))\n}\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: SupportedChainIdsWeb3,\n})\n\nexport function isAddress(value) {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\n// account is not optional\nexport function getSigner(library, account) {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library, account) {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address, ABI, library, account) {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account))\n}\n"]},"metadata":{},"sourceType":"module"}