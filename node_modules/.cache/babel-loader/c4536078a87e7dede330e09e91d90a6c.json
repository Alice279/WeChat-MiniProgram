{"ast":null,"code":"var _jsxFileName = \"/Users/alice/Documents/rigel/src/pages/components/AccountError/index.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport { SupportedChains } from '../../../constants/chainConfig';\nimport { Tag, Notification } from '../../../components';\nimport { ChainConfig, WalletConfig } from '../../../constants/chainConfig';\nimport { IS_DEV } from '../../../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AccountError({\n  chain,\n  errorType\n}) {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const chainObject = ChainConfig[chain];\n  const isWrongNetwork = errorType === 2;\n  let text = '';\n  let notiTitle = '';\n  let notiContent = '';\n\n  if (isWrongNetwork) {\n    var _WalletConfig$chainOb;\n\n    //wrong network\n    text = t('error.wrongNetwork');\n    notiTitle = t('error.unspoortedNetwork');\n    let networkContent = (chainObject === null || chainObject === void 0 ? void 0 : chainObject.fullName) + ' ' + t(`${!IS_DEV ? 'mainnet' : 'testnet'}`);\n    notiContent = t('error.unspoortedNetworkContent', {\n      network: networkContent,\n      walletName: (_WalletConfig$chainOb = WalletConfig[chainObject === null || chainObject === void 0 ? void 0 : chainObject.wallet]) === null || _WalletConfig$chainOb === void 0 ? void 0 : _WalletConfig$chainOb.name\n    });\n  } else {\n    text = t('error.index');\n    notiTitle = t('error.connecting');\n    notiContent = t('error.connectingContent');\n  }\n\n  const onClick = () => {\n    Notification.open({\n      title: notiTitle,\n      type: 'warning',\n      content: notiContent,\n      duration: 0\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Tag, {\n    onClick: onClick,\n    color: \"error\",\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AccountError, \"gd9tD1Fko1+/JEDsx4Y3zF0xCps=\", false, function () {\n  return [useTranslation];\n});\n\n_c = AccountError;\nAccountError.propTypes = {\n  chain: PropTypes.oneOf(SupportedChains).isRequired,\n  errorType: PropTypes.number\n};\nexport default AccountError;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountError\");","map":{"version":3,"sources":["/Users/alice/Documents/rigel/src/pages/components/AccountError/index.js"],"names":["PropTypes","useTranslation","SupportedChains","Tag","Notification","ChainConfig","WalletConfig","IS_DEV","AccountError","chain","errorType","t","chainObject","isWrongNetwork","text","notiTitle","notiContent","networkContent","fullName","network","walletName","wallet","name","onClick","open","title","type","content","duration","propTypes","oneOf","isRequired","number"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAAQC,cAAR,QAA6B,eAA7B;AACA,SAAQC,eAAR,QAA8B,gCAA9B;AACA,SAAQC,GAAR,EAAaC,YAAb,QAAgC,qBAAhC;AACA,SAAQC,WAAR,EAAqBC,YAArB,QAAwC,gCAAxC;AACA,SAAQC,MAAR,QAAqB,gBAArB;;;AAEA,SAASC,YAAT,CAAsB;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAtB,EAA0C;AAAA;;AACxC,QAAM;AAACC,IAAAA;AAAD,MAAMV,cAAc,EAA1B;AACA,QAAMW,WAAW,GAAGP,WAAW,CAACI,KAAD,CAA/B;AACA,QAAMI,cAAc,GAAGH,SAAS,KAAK,CAArC;AACA,MAAII,IAAI,GAAG,EAAX;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,WAAW,GAAG,EAAlB;;AACA,MAAIH,cAAJ,EAAoB;AAAA;;AAClB;AACAC,IAAAA,IAAI,GAAGH,CAAC,CAAC,oBAAD,CAAR;AACAI,IAAAA,SAAS,GAAGJ,CAAC,CAAC,yBAAD,CAAb;AACA,QAAIM,cAAc,GAChB,CAAAL,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEM,QAAb,IAAwB,GAAxB,GAA8BP,CAAC,CAAE,GAAE,CAACJ,MAAD,GAAU,SAAV,GAAsB,SAAU,EAApC,CADjC;AAEAS,IAAAA,WAAW,GAAGL,CAAC,CAAC,gCAAD,EAAmC;AAChDQ,MAAAA,OAAO,EAAEF,cADuC;AAEhDG,MAAAA,UAAU,2BAAEd,YAAY,CAACM,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAES,MAAd,CAAd,0DAAE,sBAAmCC;AAFC,KAAnC,CAAf;AAID,GAVD,MAUO;AACLR,IAAAA,IAAI,GAAGH,CAAC,CAAC,aAAD,CAAR;AACAI,IAAAA,SAAS,GAAGJ,CAAC,CAAC,kBAAD,CAAb;AACAK,IAAAA,WAAW,GAAGL,CAAC,CAAC,yBAAD,CAAf;AACD;;AACD,QAAMY,OAAO,GAAG,MAAM;AACpBnB,IAAAA,YAAY,CAACoB,IAAb,CAAkB;AAChBC,MAAAA,KAAK,EAAEV,SADS;AAEhBW,MAAAA,IAAI,EAAE,SAFU;AAGhBC,MAAAA,OAAO,EAAEX,WAHO;AAIhBY,MAAAA,QAAQ,EAAE;AAJM,KAAlB;AAMD,GAPD;;AAQA,sBACE,QAAC,GAAD;AAAK,IAAA,OAAO,EAAEL,OAAd;AAAuB,IAAA,KAAK,EAAC,OAA7B;AAAA,cACGT;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAnCQN,Y;UACKP,c;;;KADLO,Y;AAoCTA,YAAY,CAACqB,SAAb,GAAyB;AACvBpB,EAAAA,KAAK,EAAET,SAAS,CAAC8B,KAAV,CAAgB5B,eAAhB,EAAiC6B,UADjB;AAEvBrB,EAAAA,SAAS,EAAEV,SAAS,CAACgC;AAFE,CAAzB;AAIA,eAAexB,YAAf","sourcesContent":["import PropTypes from 'prop-types'\nimport {useTranslation} from 'react-i18next'\nimport {SupportedChains} from '../../../constants/chainConfig'\nimport {Tag, Notification} from '../../../components'\nimport {ChainConfig, WalletConfig} from '../../../constants/chainConfig'\nimport {IS_DEV} from '../../../utils'\n\nfunction AccountError({chain, errorType}) {\n  const {t} = useTranslation()\n  const chainObject = ChainConfig[chain]\n  const isWrongNetwork = errorType === 2\n  let text = ''\n  let notiTitle = ''\n  let notiContent = ''\n  if (isWrongNetwork) {\n    //wrong network\n    text = t('error.wrongNetwork')\n    notiTitle = t('error.unspoortedNetwork')\n    let networkContent =\n      chainObject?.fullName + ' ' + t(`${!IS_DEV ? 'mainnet' : 'testnet'}`)\n    notiContent = t('error.unspoortedNetworkContent', {\n      network: networkContent,\n      walletName: WalletConfig[chainObject?.wallet]?.name,\n    })\n  } else {\n    text = t('error.index')\n    notiTitle = t('error.connecting')\n    notiContent = t('error.connectingContent')\n  }\n  const onClick = () => {\n    Notification.open({\n      title: notiTitle,\n      type: 'warning',\n      content: notiContent,\n      duration: 0,\n    })\n  }\n  return (\n    <Tag onClick={onClick} color=\"error\">\n      {text}\n    </Tag>\n  )\n}\nAccountError.propTypes = {\n  chain: PropTypes.oneOf(SupportedChains).isRequired,\n  errorType: PropTypes.number,\n}\nexport default AccountError\n"]},"metadata":{},"sourceType":"module"}