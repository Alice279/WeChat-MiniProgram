{"ast":null,"code":"var _jsxFileName = \"/Users/alice/Documents/rigel/src/components/Dropdown/index.js\";\n\n/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport RcDropdown from 'rc-dropdown';\nimport 'rc-dropdown/assets/index.css';\nimport { ArrowDownOutlined } from '../../assets/svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dropdown({\n  overlay,\n  trigger,\n  mouseEnterDelay = 0.15,\n  mouseLeaveDelay = 0.1,\n  transitionName,\n  disabled,\n  placement,\n  children,\n  ...props\n}) {\n  // TODO: custom animation name\n  // const getTransitionName = () => {\n  //   if (transitionName !== undefined) {\n  //     return transitionName\n  //   }\n  //   if (placement && placement.indexOf('top') >= 0) {\n  //     return 'slide-down'\n  //   }\n  //   return 'slide-up'\n  // }\n  const renderOverlay = () => {\n    // rc-dropdown already can process the function of overlay, but we have check logic here.\n    // So we need render the element to check and pass back to rc-dropdown.\n    let overlayNode;\n\n    if (typeof overlay === 'function') {\n      overlayNode = overlay();\n    } else {\n      overlayNode = overlay;\n    }\n\n    overlayNode = React.Children.only(typeof overlayNode === 'string' ? /*#__PURE__*/_jsxDEV(\"span\", {\n      children: overlayNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this) : overlayNode);\n    const overlayProps = overlayNode.props; // menu can be selectable and focusable in dropdown defaultly\n\n    const {\n      selectable = true,\n      focusable = true,\n      expandIcon\n    } = overlayProps;\n    const overlayNodeExpandIcon = typeof expandIcon !== 'undefined' && /*#__PURE__*/React.isValidElement(expandIcon) ? expandIcon : /*#__PURE__*/_jsxDEV(ArrowDownOutlined, {\n      className: \"w-4 h-4 text-gry-40\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this);\n    const fixedModeOverlay = typeof overlayNode.type === 'string' ? overlayNode : /*#__PURE__*/React.cloneElement(overlayNode, {\n      mode: 'vertical',\n      className: 'shadow-2 py-2 my-0.5 bg-gray-0 relative',\n      selectable,\n      focusable,\n      expandIcon: overlayNodeExpandIcon\n    });\n    return fixedModeOverlay;\n  };\n\n  const getPlacement = () => {\n    if (placement !== undefined) {\n      return placement;\n    }\n\n    return 'bottomLeft';\n  };\n\n  const child = React.Children.only(children);\n  const dropdownTrigger = /*#__PURE__*/React.cloneElement(child, {\n    className: `trigger ${child.props.className || ''}`,\n    disabled\n  });\n  const triggerActions = disabled ? [] : trigger;\n  let alignPoint;\n\n  if (triggerActions && triggerActions.indexOf('contextMenu') !== -1) {\n    alignPoint = true;\n  }\n\n  return /*#__PURE__*/_jsxDEV(RcDropdown, {\n    alignPoint: alignPoint // transitionName={getTransitionName()}\n    ,\n    animation: \"slide-up\",\n    trigger: triggerActions,\n    overlay: () => renderOverlay(),\n    placement: getPlacement(),\n    ...props,\n    children: dropdownTrigger\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Dropdown;\nDropdown.propTypes = {\n  arrow: PropTypes.bool,\n  trigger: PropTypes.array,\n  overlay: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,\n  onVisibleChange: PropTypes.func,\n  visible: PropTypes.bool,\n  disabled: PropTypes.bool,\n  align: PropTypes.object,\n  getPopupContainer: PropTypes.func,\n  prefixCls: PropTypes.string,\n  className: PropTypes.string,\n  transitionName: PropTypes.string,\n  placement: PropTypes.oneOf(['topLeft', 'topCenter', 'topRight', 'bottomLeft', 'bottomCenter', 'bottomRight']),\n  overlayClassName: PropTypes.string,\n  overlayStyle: PropTypes.object,\n  forceRender: PropTypes.bool,\n  mouseEnterDelay: PropTypes.number,\n  mouseLeaveDelay: PropTypes.number,\n  openClassName: PropTypes.string\n};\nexport default Dropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"sources":["/Users/alice/Documents/rigel/src/components/Dropdown/index.js"],"names":["React","PropTypes","RcDropdown","ArrowDownOutlined","Dropdown","overlay","trigger","mouseEnterDelay","mouseLeaveDelay","transitionName","disabled","placement","children","props","renderOverlay","overlayNode","Children","only","overlayProps","selectable","focusable","expandIcon","overlayNodeExpandIcon","isValidElement","fixedModeOverlay","type","cloneElement","mode","className","getPlacement","undefined","child","dropdownTrigger","triggerActions","alignPoint","indexOf","propTypes","arrow","bool","array","oneOfType","func","node","isRequired","arrayOf","onVisibleChange","visible","align","object","getPopupContainer","prefixCls","string","oneOf","overlayClassName","overlayStyle","forceRender","number","openClassName"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport RcDropdown from 'rc-dropdown'\nimport 'rc-dropdown/assets/index.css'\nimport {ArrowDownOutlined} from '../../assets/svg'\nfunction Dropdown({\n  overlay,\n  trigger,\n  mouseEnterDelay = 0.15,\n  mouseLeaveDelay = 0.1,\n  transitionName,\n  disabled,\n  placement,\n  children,\n  ...props\n}) {\n  // TODO: custom animation name\n  // const getTransitionName = () => {\n  //   if (transitionName !== undefined) {\n  //     return transitionName\n  //   }\n  //   if (placement && placement.indexOf('top') >= 0) {\n  //     return 'slide-down'\n  //   }\n  //   return 'slide-up'\n  // }\n\n  const renderOverlay = () => {\n    // rc-dropdown already can process the function of overlay, but we have check logic here.\n    // So we need render the element to check and pass back to rc-dropdown.\n\n    let overlayNode\n    if (typeof overlay === 'function') {\n      overlayNode = overlay()\n    } else {\n      overlayNode = overlay\n    }\n    overlayNode = React.Children.only(\n      typeof overlayNode === 'string' ? (\n        <span>{overlayNode}</span>\n      ) : (\n        overlayNode\n      ),\n    )\n\n    const overlayProps = overlayNode.props\n\n    // menu can be selectable and focusable in dropdown defaultly\n    const {selectable = true, focusable = true, expandIcon} = overlayProps\n\n    const overlayNodeExpandIcon =\n      typeof expandIcon !== 'undefined' && React.isValidElement(expandIcon) ? (\n        expandIcon\n      ) : (\n        <ArrowDownOutlined className=\"w-4 h-4 text-gry-40\" />\n      )\n\n    const fixedModeOverlay =\n      typeof overlayNode.type === 'string'\n        ? overlayNode\n        : React.cloneElement(overlayNode, {\n            mode: 'vertical',\n            className: 'shadow-2 py-2 my-0.5 bg-gray-0 relative',\n            selectable,\n            focusable,\n            expandIcon: overlayNodeExpandIcon,\n          })\n\n    return fixedModeOverlay\n  }\n\n  const getPlacement = () => {\n    if (placement !== undefined) {\n      return placement\n    }\n    return 'bottomLeft'\n  }\n\n  const child = React.Children.only(children)\n\n  const dropdownTrigger = React.cloneElement(child, {\n    className: `trigger ${child.props.className || ''}`,\n    disabled,\n  })\n\n  const triggerActions = disabled ? [] : trigger\n  let alignPoint\n  if (triggerActions && triggerActions.indexOf('contextMenu') !== -1) {\n    alignPoint = true\n  }\n\n  return (\n    <RcDropdown\n      alignPoint={alignPoint}\n      // transitionName={getTransitionName()}\n      animation=\"slide-up\"\n      trigger={triggerActions}\n      overlay={() => renderOverlay()}\n      placement={getPlacement()}\n      {...props}\n    >\n      {dropdownTrigger}\n    </RcDropdown>\n  )\n}\n\nDropdown.propTypes = {\n  arrow: PropTypes.bool,\n  trigger: PropTypes.array,\n  overlay: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n  onVisibleChange: PropTypes.func,\n  visible: PropTypes.bool,\n  disabled: PropTypes.bool,\n  align: PropTypes.object,\n  getPopupContainer: PropTypes.func,\n  prefixCls: PropTypes.string,\n  className: PropTypes.string,\n  transitionName: PropTypes.string,\n  placement: PropTypes.oneOf([\n    'topLeft',\n    'topCenter',\n    'topRight',\n    'bottomLeft',\n    'bottomCenter',\n    'bottomRight',\n  ]),\n  overlayClassName: PropTypes.string,\n  overlayStyle: PropTypes.object,\n  forceRender: PropTypes.bool,\n  mouseEnterDelay: PropTypes.number,\n  mouseLeaveDelay: PropTypes.number,\n  openClassName: PropTypes.string,\n}\n\nexport default Dropdown\n"]},"metadata":{},"sourceType":"module"}