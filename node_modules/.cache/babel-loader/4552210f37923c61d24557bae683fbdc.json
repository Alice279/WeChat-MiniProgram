{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useBalance;\nexports.UPDATE_USER_BALANCE_SWR_ID = void 0;\n\nvar _cfxSingleCallBalanceCheckerAbi = _interopRequireDefault(require(\"./contracts/cfx-single-call-balance-checker-abi.json\"));\n\nvar _react = require(\"react\");\n\nvar _ = require(\"./\");\n\nvar _initContract = _interopRequireDefault(require(\"./initContract\"));\n\nvar _window;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst UPDATE_USER_BALANCE_SWR_ID = \"UPDATE_USER_BALANCE_SWR_ID\";\nexports.UPDATE_USER_BALANCE_SWR_ID = UPDATE_USER_BALANCE_SWR_ID;\nlet c = (0, _initContract.default)({\n  abi: _cfxSingleCallBalanceCheckerAbi.default,\n  address: \"0x8f35930629fce5b5cf4cd762e71006045bfeb24d\"\n}, (_window = window) === null || _window === void 0 ? void 0 : _window.confluxJS);\n\nfunction getTokensBalance(userAddr, tokenAddrs) {\n  var _c, _c$balances;\n\n  return (_c = c) === null || _c === void 0 ? void 0 : (_c$balances = _c.balances([userAddr], [\"0x0000000000000000000000000000000000000000\", ...tokenAddrs])) === null || _c$balances === void 0 ? void 0 : _c$balances.call();\n}\n\nfunction useBalance(userAddr, tokenAddrs) {\n  const confluxJSDefined = (0, _.useConfluxJSDefined)();\n  const {\n    chainId\n  } = (0, _.useChainNetId)();\n  (0, _react.useEffect)(() => {\n    if (!confluxJSDefined || !chainId) return;\n\n    if (c) {\n      c._feedAddressNetId(_cfxSingleCallBalanceCheckerAbi.default, window.confluxJS);\n    } else {\n      c = (0, _initContract.default)({\n        abi: _cfxSingleCallBalanceCheckerAbi.default,\n        address: \"0x8f35930629fce5b5cf4cd762e71006045bfeb24d\"\n      }, window.confluxJS);\n    }\n  }, [confluxJSDefined, Boolean(chainId)]);\n  const {\n    data: [balance, ...tokenBalances],\n    error: balanceErr\n  } = (0, _.useEpochNumberSWR)(userAddr ? [UPDATE_USER_BALANCE_SWR_ID, userAddr, tokenAddrs.toString()] : null, () => getTokensBalance(userAddr, tokenAddrs), {\n    initialData: [0, ...tokenAddrs.map(() => 0)],\n    revalidateOnMount: true\n  });\n  if (balanceErr) console.error(`Get Balance Error: ${balanceErr.message}`);\n  return [balance, tokenBalances];\n}","map":{"version":3,"sources":["../src/useBalance.js"],"names":["UPDATE_USER_BALANCE_SWR_ID","c","abi","SINGLE_CALL_BALANCES_ABI","address","window","confluxJSDefined","chainId","Boolean","data","error","balanceErr","userAddr","tokenAddrs","getTokensBalance","initialData","revalidateOnMount","console","message"],"mappings":";;;;;;;;AAAA,IAAA,+BAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,sDAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,IAAA,CAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AAEA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;;;;;;;;;AAEO,MAAMA,0BAA0B,GAAhC,4BAAA;;AAEP,IAAIC,CAAC,GAAG,CAAA,GAAA,aAAA,CAAA,OAAA,EAAa;AACnBC,EAAAA,GAAG,EAAEC,+BAAAA,CADc,OAAA;AAEnBC,EAAAA,OAAO,EAAE;AAFU,CAAb,EAAA,CAAA,OAAA,GAAA,MAAA,MAAA,IAAA,IAAA,OAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAGLC,OAAAA,CAHH,SAAQ,CAAR;;AAKA,SAAA,gBAAA,CAAA,QAAA,EAAA,UAAA,EAAgD;AAAA,MAAA,EAAA,EAAA,WAAA;;AAC9C,SAAA,CAAA,EAAA,GAAA,CAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,WAAA,GAAOJ,EAAAA,CAAAA,QAAAA,CAEL,CAFKA,QAEL,CAFKA,EAGL,CAAA,4CAAA,EAA+C,GAHjD,UAGE,CAHKA,CAAP,MAAA,IAAA,IAAA,WAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAOA,WAAAA,CAAP,IAAOA,EAAP;AAMD;;AAEc,SAAA,UAAA,CAAA,QAAA,EAAA,UAAA,EAA0C;AACvD,QAAMK,gBAAgB,GAAG,CAAA,GAAA,CAAA,CAAzB,mBAAyB,GAAzB;AACA,QAAM;AAACC,IAAAA;AAAD,MAAY,CAAA,GAAA,CAAA,CAAlB,aAAkB,GAAlB;AAEA,GAAA,GAAA,MAAA,CAAA,SAAA,EAAU,MAAM;AACd,QAAI,CAAA,gBAAA,IAAqB,CAAzB,OAAA,EAAmC;;AACnC,QAAA,CAAA,EAAO;AACLN,MAAAA,CAAC,CAADA,iBAAAA,CAAoBE,+BAAAA,CAApBF,OAAAA,EAA8CI,MAAM,CAApDJ,SAAAA;AADF,KAAA,MAEO;AACLA,MAAAA,CAAC,GAAG,CAAA,GAAA,aAAA,CAAA,OAAA,EAAa;AACfC,QAAAA,GAAG,EAAEC,+BAAAA,CADU,OAAA;AAEfC,QAAAA,OAAO,EAAE;AAFM,OAAb,EAGDC,MAAM,CAHTJ,SAAI,CAAJA;AAID;AATH,GAAA,EAUG,CAAA,gBAAA,EAAmBO,OAAO,CAV7B,OAU6B,CAA1B,CAVH;AAYA,QAAM;AACJC,IAAAA,IAAI,EAAE,CAAA,OAAA,EAAU,GADZ,aACE,CADF;AAEJC,IAAAA,KAAK,EAAEC;AAFH,MAGF,CAAA,GAAA,CAAA,CAAA,iBAAA,EACFC,QAAQ,GACJ,CAAA,0BAAA,EAAA,QAAA,EAAuCC,UAAU,CAD7C,QACmCA,EAAvC,CADI,GADN,IAAA,EAIF,MAAMC,gBAAgB,CAAA,QAAA,EAJpB,UAIoB,CAJpB,EAKF;AAAEC,IAAAA,WAAW,EAAE,CAAA,CAAA,EAAI,GAAGF,UAAU,CAAVA,GAAAA,CAAe,MAArC,CAAsBA,CAAP,CAAf;AAAgDG,IAAAA,iBAAiB,EAAE;AAAnE,GALE,CAHJ;AAWA,MAAA,UAAA,EAAgBC,OAAO,CAAPA,KAAAA,CAAe,sBAAqBN,UAAU,CAACO,OAA/CD,EAAAA;AAEhB,SAAO,CAAA,OAAA,EAAP,aAAO,CAAP;AACD","sourcesContent":["import SINGLE_CALL_BALANCES_ABI from \"./contracts/cfx-single-call-balance-checker-abi.json\";\nimport { useEffect } from \"react\";\nimport { useConfluxJSDefined, useEpochNumberSWR } from \"./\";\nimport { useChainNetId } from './';\nimport initContract from \"./initContract\";\n\nexport const UPDATE_USER_BALANCE_SWR_ID = \"UPDATE_USER_BALANCE_SWR_ID\";\n\nlet c = initContract({\n  abi: SINGLE_CALL_BALANCES_ABI,\n  address: \"0x8f35930629fce5b5cf4cd762e71006045bfeb24d\",\n}, window?.confluxJS);\n\nfunction getTokensBalance(userAddr, tokenAddrs) {\n  return c\n  ?.balances(\n    [userAddr],\n    [\"0x0000000000000000000000000000000000000000\", ...tokenAddrs]\n  )\n  ?.call();\n}\n\nexport default function useBalance(userAddr, tokenAddrs) {\n  const confluxJSDefined = useConfluxJSDefined();\n  const {chainId} = useChainNetId()\n\n  useEffect(() => {\n    if (!confluxJSDefined || !chainId) return\n    if (c) {\n      c._feedAddressNetId(SINGLE_CALL_BALANCES_ABI, window.confluxJS)\n    } else {\n      c = initContract({\n        abi: SINGLE_CALL_BALANCES_ABI,\n        address: \"0x8f35930629fce5b5cf4cd762e71006045bfeb24d\",\n      }, window.confluxJS);\n    }\n  }, [confluxJSDefined, Boolean(chainId)]);\n\n  const {\n    data: [balance, ...tokenBalances],\n    error: balanceErr,\n  } = useEpochNumberSWR(\n    userAddr\n      ? [UPDATE_USER_BALANCE_SWR_ID, userAddr, tokenAddrs.toString()]\n      : null,\n    () => getTokensBalance(userAddr, tokenAddrs),\n    { initialData: [0, ...tokenAddrs.map(() => 0)], revalidateOnMount: true }\n  );\n\n  if (balanceErr) console.error(`Get Balance Error: ${balanceErr.message}`);\n\n  return [balance, tokenBalances];\n}\n"]},"metadata":{},"sourceType":"script"}