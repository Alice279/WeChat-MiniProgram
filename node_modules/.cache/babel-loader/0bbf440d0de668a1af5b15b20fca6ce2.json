{"ast":null,"code":"var _jsxFileName = \"/Users/alice/Documents/rigel/src/pages/Shuttle/ConfirmModal/ShuttleButton/Out.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport Big from 'big.js';\nimport { Button } from '../../../../components';\nimport { Send } from '../../../../assets/svg';\nimport { SupportedChains, KeyOfCfx } from '../../../../constants/chainConfig';\nimport useShuttleAddress from '../../../../hooks/useShuttleAddress';\nimport { useIsCfxChain, useIsBtcChain } from '../../../../hooks';\nimport { useShuttleContract } from '../../../../hooks/useShuttleContract';\nimport { ContractType } from '../../../../constants/contractConfig';\nimport { useCustodianData } from '../../../../hooks/useShuttleData';\nimport { ZeroAddrHex, TxReceiptModalType } from '../../../../constants';\nimport { useShuttleState } from '../../../../state';\nimport { getExponent } from '../../../../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ShuttleOutButton({\n  fromChain,\n  toChain,\n  toToken,\n  value,\n  onClose,\n  disabled,\n  setTxModalType,\n  setTxModalShow,\n  setTxHash,\n  fromAddress,\n  toAddress\n}) {\n  _s();\n\n  var _window;\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    origin,\n    decimals,\n    ctoken\n  } = toToken;\n  const isCfxChain = useIsCfxChain(origin);\n  const isToChainBtc = useIsBtcChain(toChain);\n  const [outAddress, setOutAddress] = useState('');\n  const shuttleAddress = useShuttleAddress(outAddress, fromChain, toChain, 'out');\n  const tokenBaseContract = useShuttleContract(ContractType.tokenBase);\n  const confluxJS = (_window = window) === null || _window === void 0 ? void 0 : _window.confluxJS;\n  const {\n    out_fee\n  } = useCustodianData(toChain, toToken);\n  const {\n    toBtcAddress\n  } = useShuttleState();\n  const [didMount, setDidMount] = useState(false);\n  useEffect(() => {\n    setDidMount(true);\n\n    if (isToChainBtc) {\n      setOutAddress(toBtcAddress);\n    } else {\n      setOutAddress(toAddress);\n    }\n\n    return () => {\n      setDidMount(false);\n    };\n  }, [isToChainBtc, toAddress, toBtcAddress]);\n\n  const onSubmit = async () => {\n    setTxModalShow(true);\n    setTxModalType(TxReceiptModalType.ongoing);\n\n    if (isCfxChain) {\n      const amountVal = Big(value).mul(getExponent(decimals));\n\n      if (ctoken === KeyOfCfx) {\n        try {\n          const data = await confluxJS.sendTransaction({\n            from: fromAddress,\n            to: shuttleAddress,\n            value: amountVal\n          });\n          setTxHash(data);\n          setTxModalType(TxReceiptModalType.success);\n        } catch {\n          setTxModalType(TxReceiptModalType.error);\n        }\n      } else {\n        try {\n          const data = await tokenBaseContract.transfer(shuttleAddress, amountVal).sendTransaction({\n            from: fromAddress,\n            to: ctoken\n          });\n          setTxHash(data);\n          setTxModalType(TxReceiptModalType.success);\n        } catch {\n          setTxModalType(TxReceiptModalType.error);\n        }\n      }\n    } else {\n      const amountVal = Big(value).mul(getExponent(18));\n\n      try {\n        const data = await tokenBaseContract['burn'](fromAddress, amountVal, Big(out_fee).mul(getExponent(18)), outAddress, ZeroAddrHex).sendTransaction({\n          from: fromAddress,\n          to: ctoken\n        });\n        setTxHash(data);\n        setTxModalType(TxReceiptModalType.success);\n      } catch {\n        setTxModalType(TxReceiptModalType.error);\n      }\n    }\n\n    onClose && onClose();\n  };\n\n  if (!didMount) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    startIcon: /*#__PURE__*/_jsxDEV(Send, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 18\n    }, this),\n    onClick: onSubmit,\n    disabled: disabled,\n    size: \"large\",\n    id: \"shuttleOut\",\n    children: t('send')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ShuttleOutButton, \"qbH7mjswNem17+sWS5wjSUtpJWE=\", false, function () {\n  return [useTranslation, useIsCfxChain, useIsBtcChain, useShuttleAddress, useShuttleContract, useCustodianData, useShuttleState];\n});\n\n_c = ShuttleOutButton;\nShuttleOutButton.propTypes = {\n  fromChain: PropTypes.oneOf(SupportedChains).isRequired,\n  toChain: PropTypes.oneOf(SupportedChains).isRequired,\n  fromToken: PropTypes.object.isRequired,\n  toToken: PropTypes.object.isRequired,\n  value: PropTypes.string.isRequired,\n  onClose: PropTypes.func,\n  disabled: PropTypes.bool,\n  setTxModalType: PropTypes.func,\n  setTxHash: PropTypes.func,\n  setTxModalShow: PropTypes.func,\n  fromAddress: PropTypes.string,\n  toAddress: PropTypes.string\n};\nexport default ShuttleOutButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShuttleOutButton\");","map":{"version":3,"sources":["/Users/alice/Documents/rigel/src/pages/Shuttle/ConfirmModal/ShuttleButton/Out.js"],"names":["useState","useEffect","PropTypes","useTranslation","Big","Button","Send","SupportedChains","KeyOfCfx","useShuttleAddress","useIsCfxChain","useIsBtcChain","useShuttleContract","ContractType","useCustodianData","ZeroAddrHex","TxReceiptModalType","useShuttleState","getExponent","ShuttleOutButton","fromChain","toChain","toToken","value","onClose","disabled","setTxModalType","setTxModalShow","setTxHash","fromAddress","toAddress","t","origin","decimals","ctoken","isCfxChain","isToChainBtc","outAddress","setOutAddress","shuttleAddress","tokenBaseContract","tokenBase","confluxJS","window","out_fee","toBtcAddress","didMount","setDidMount","onSubmit","ongoing","amountVal","mul","data","sendTransaction","from","to","success","error","transfer","propTypes","oneOf","isRequired","fromToken","object","string","func","bool"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react'\nimport PropTypes from 'prop-types'\nimport {useTranslation} from 'react-i18next'\nimport Big from 'big.js'\n\nimport {Button} from '../../../../components'\nimport {Send} from '../../../../assets/svg'\nimport {SupportedChains, KeyOfCfx} from '../../../../constants/chainConfig'\nimport useShuttleAddress from '../../../../hooks/useShuttleAddress'\nimport {useIsCfxChain, useIsBtcChain} from '../../../../hooks'\nimport {useShuttleContract} from '../../../../hooks/useShuttleContract'\nimport {ContractType} from '../../../../constants/contractConfig'\nimport {useCustodianData} from '../../../../hooks/useShuttleData'\nimport {ZeroAddrHex, TxReceiptModalType} from '../../../../constants'\nimport {useShuttleState} from '../../../../state'\nimport {getExponent} from '../../../../utils'\n\nfunction ShuttleOutButton({\n  fromChain,\n  toChain,\n  toToken,\n  value,\n  onClose,\n  disabled,\n  setTxModalType,\n  setTxModalShow,\n  setTxHash,\n  fromAddress,\n  toAddress,\n}) {\n  const {t} = useTranslation()\n  const {origin, decimals, ctoken} = toToken\n  const isCfxChain = useIsCfxChain(origin)\n  const isToChainBtc = useIsBtcChain(toChain)\n  const [outAddress, setOutAddress] = useState('')\n  const shuttleAddress = useShuttleAddress(\n    outAddress,\n    fromChain,\n    toChain,\n    'out',\n  )\n  const tokenBaseContract = useShuttleContract(ContractType.tokenBase)\n  const confluxJS = window?.confluxJS\n  const {out_fee} = useCustodianData(toChain, toToken)\n  const {toBtcAddress} = useShuttleState()\n  const [didMount, setDidMount] = useState(false)\n\n  useEffect(() => {\n    setDidMount(true)\n    if (isToChainBtc) {\n      setOutAddress(toBtcAddress)\n    } else {\n      setOutAddress(toAddress)\n    }\n    return () => {\n      setDidMount(false)\n    }\n  }, [isToChainBtc, toAddress, toBtcAddress])\n\n  const onSubmit = async () => {\n    setTxModalShow(true)\n    setTxModalType(TxReceiptModalType.ongoing)\n    if (isCfxChain) {\n      const amountVal = Big(value).mul(getExponent(decimals))\n      if (ctoken === KeyOfCfx) {\n        try {\n          const data = await confluxJS.sendTransaction({\n            from: fromAddress,\n            to: shuttleAddress,\n            value: amountVal,\n          })\n          setTxHash(data)\n          setTxModalType(TxReceiptModalType.success)\n        } catch {\n          setTxModalType(TxReceiptModalType.error)\n        }\n      } else {\n        try {\n          const data = await tokenBaseContract\n            .transfer(shuttleAddress, amountVal)\n            .sendTransaction({\n              from: fromAddress,\n              to: ctoken,\n            })\n          setTxHash(data)\n          setTxModalType(TxReceiptModalType.success)\n        } catch {\n          setTxModalType(TxReceiptModalType.error)\n        }\n      }\n    } else {\n      const amountVal = Big(value).mul(getExponent(18))\n      try {\n        const data = await tokenBaseContract['burn'](\n          fromAddress,\n          amountVal,\n          Big(out_fee).mul(getExponent(18)),\n          outAddress,\n          ZeroAddrHex,\n        ).sendTransaction({\n          from: fromAddress,\n          to: ctoken,\n        })\n        setTxHash(data)\n        setTxModalType(TxReceiptModalType.success)\n      } catch {\n        setTxModalType(TxReceiptModalType.error)\n      }\n    }\n    onClose && onClose()\n  }\n\n  if (!didMount) {\n    return null\n  }\n  return (\n    <Button\n      startIcon={<Send />}\n      onClick={onSubmit}\n      disabled={disabled}\n      size=\"large\"\n      id=\"shuttleOut\"\n    >\n      {t('send')}\n    </Button>\n  )\n}\n\nShuttleOutButton.propTypes = {\n  fromChain: PropTypes.oneOf(SupportedChains).isRequired,\n  toChain: PropTypes.oneOf(SupportedChains).isRequired,\n  fromToken: PropTypes.object.isRequired,\n  toToken: PropTypes.object.isRequired,\n  value: PropTypes.string.isRequired,\n  onClose: PropTypes.func,\n  disabled: PropTypes.bool,\n  setTxModalType: PropTypes.func,\n  setTxHash: PropTypes.func,\n  setTxModalShow: PropTypes.func,\n  fromAddress: PropTypes.string,\n  toAddress: PropTypes.string,\n}\n\nexport default ShuttleOutButton\n"]},"metadata":{},"sourceType":"module"}