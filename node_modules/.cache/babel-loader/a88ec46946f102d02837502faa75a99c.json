{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { ContractConfig } from '../constants/contractConfig';\nimport { useContract as useContractPortal } from '../hooks/usePortal';\nimport { useContract as useContractWeb3 } from '../hooks/useWeb3Network';\nimport { KeyOfMetaMask, KeyOfPortal } from '../constants/chainConfig';\nexport function useShuttleContract(contractType, chain) {\n  _s();\n\n  const contractObj = ContractConfig[contractType];\n  const {\n    abi,\n    wallet\n  } = contractObj;\n  const addressOfChain = contractObj === null || contractObj === void 0 ? void 0 : contractObj.address;\n  const address = typeof addressOfChain === 'object' ? addressOfChain[chain] || '' : addressOfChain;\n  const contractPortal = useContractPortal(address, abi);\n  const contractWeb3 = useContractWeb3(address, abi);\n  let contract = {};\n\n  switch (wallet) {\n    case KeyOfMetaMask:\n      contract = contractWeb3;\n      break;\n\n    case KeyOfPortal:\n      contract = contractPortal;\n      break;\n  }\n\n  return contract;\n}\n/**\n *\n * @param {*} contractType\n * @param {*} chain\n * @param {*} methodWithParams first param is method name,second param is the params of this method\n */\n\n_s(useShuttleContract, \"y5HlggiI1v9AzjfWkiNkQMsXtGg=\", false, function () {\n  return [useContractPortal, useContractWeb3];\n});\n\nexport function useContractData(contractType, chain, methodWithParams = []) {\n  _s2();\n\n  const contract = useShuttleContract(contractType, chain);\n  let methodArr = [];\n  methodWithParams.map(item => {\n    methodArr.push(contract[item[0]](item[1]));\n  });\n  const promiseArr = methodArr.map(fn => fn.call());\n  let reseponse = [];\n  Promise.all(promiseArr).then(data => {\n    reseponse = data;\n  }).catch(() => {\n    reseponse = [];\n  });\n  return reseponse;\n}\n\n_s2(useContractData, \"BHEYsjbwN2ZOKdhxovBAbVIsSzc=\", false, function () {\n  return [useShuttleContract];\n});","map":{"version":3,"sources":["/Users/alice/Documents/rigel/src/hooks/useShuttleContract.js"],"names":["ContractConfig","useContract","useContractPortal","useContractWeb3","KeyOfMetaMask","KeyOfPortal","useShuttleContract","contractType","chain","contractObj","abi","wallet","addressOfChain","address","contractPortal","contractWeb3","contract","useContractData","methodWithParams","methodArr","map","item","push","promiseArr","fn","call","reseponse","Promise","all","then","data","catch"],"mappings":";;;AAAA,SAAQA,cAAR,QAA6B,6BAA7B;AACA,SAAQC,WAAW,IAAIC,iBAAvB,QAA+C,oBAA/C;AACA,SAAQD,WAAW,IAAIE,eAAvB,QAA6C,yBAA7C;AACA,SAAQC,aAAR,EAAuBC,WAAvB,QAAyC,0BAAzC;AAEA,OAAO,SAASC,kBAAT,CAA4BC,YAA5B,EAA0CC,KAA1C,EAAiD;AAAA;;AACtD,QAAMC,WAAW,GAAGT,cAAc,CAACO,YAAD,CAAlC;AACA,QAAM;AAACG,IAAAA,GAAD;AAAMC,IAAAA;AAAN,MAAgBF,WAAtB;AACA,QAAMG,cAAc,GAAGH,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEI,OAApC;AACA,QAAMA,OAAO,GACX,OAAOD,cAAP,KAA0B,QAA1B,GACIA,cAAc,CAACJ,KAAD,CAAd,IAAyB,EAD7B,GAEII,cAHN;AAIA,QAAME,cAAc,GAAGZ,iBAAiB,CAACW,OAAD,EAAUH,GAAV,CAAxC;AACA,QAAMK,YAAY,GAAGZ,eAAe,CAACU,OAAD,EAAUH,GAAV,CAApC;AACA,MAAIM,QAAQ,GAAG,EAAf;;AACA,UAAQL,MAAR;AACE,SAAKP,aAAL;AACEY,MAAAA,QAAQ,GAAGD,YAAX;AACA;;AACF,SAAKV,WAAL;AACEW,MAAAA,QAAQ,GAAGF,cAAX;AACA;AANJ;;AAQA,SAAOE,QAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;GA3BgBV,kB;UAQSJ,iB,EACFC,e;;;AAmBvB,OAAO,SAASc,eAAT,CAAyBV,YAAzB,EAAuCC,KAAvC,EAA8CU,gBAAgB,GAAG,EAAjE,EAAqE;AAAA;;AAC1E,QAAMF,QAAQ,GAAGV,kBAAkB,CAACC,YAAD,EAAeC,KAAf,CAAnC;AACA,MAAIW,SAAS,GAAG,EAAhB;AACAD,EAAAA,gBAAgB,CAACE,GAAjB,CAAqBC,IAAI,IAAI;AAC3BF,IAAAA,SAAS,CAACG,IAAV,CAAeN,QAAQ,CAACK,IAAI,CAAC,CAAD,CAAL,CAAR,CAAkBA,IAAI,CAAC,CAAD,CAAtB,CAAf;AACD,GAFD;AAGA,QAAME,UAAU,GAAGJ,SAAS,CAACC,GAAV,CAAcI,EAAE,IAAIA,EAAE,CAACC,IAAH,EAApB,CAAnB;AACA,MAAIC,SAAS,GAAG,EAAhB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ,EACGM,IADH,CACQC,IAAI,IAAI;AACZJ,IAAAA,SAAS,GAAGI,IAAZ;AACD,GAHH,EAIGC,KAJH,CAIS,MAAM;AACXL,IAAAA,SAAS,GAAG,EAAZ;AACD,GANH;AAOA,SAAOA,SAAP;AACD;;IAhBeT,e;UACGX,kB","sourcesContent":["import {ContractConfig} from '../constants/contractConfig'\nimport {useContract as useContractPortal} from '../hooks/usePortal'\nimport {useContract as useContractWeb3} from '../hooks/useWeb3Network'\nimport {KeyOfMetaMask, KeyOfPortal} from '../constants/chainConfig'\n\nexport function useShuttleContract(contractType, chain) {\n  const contractObj = ContractConfig[contractType]\n  const {abi, wallet} = contractObj\n  const addressOfChain = contractObj?.address\n  const address =\n    typeof addressOfChain === 'object'\n      ? addressOfChain[chain] || ''\n      : addressOfChain\n  const contractPortal = useContractPortal(address, abi)\n  const contractWeb3 = useContractWeb3(address, abi)\n  let contract = {}\n  switch (wallet) {\n    case KeyOfMetaMask:\n      contract = contractWeb3\n      break\n    case KeyOfPortal:\n      contract = contractPortal\n      break\n  }\n  return contract\n}\n\n/**\n *\n * @param {*} contractType\n * @param {*} chain\n * @param {*} methodWithParams first param is method name,second param is the params of this method\n */\nexport function useContractData(contractType, chain, methodWithParams = []) {\n  const contract = useShuttleContract(contractType, chain)\n  let methodArr = []\n  methodWithParams.map(item => {\n    methodArr.push(contract[item[0]](item[1]))\n  })\n  const promiseArr = methodArr.map(fn => fn.call())\n  let reseponse = []\n  Promise.all(promiseArr)\n    .then(data => {\n      reseponse = data\n    })\n    .catch(() => {\n      reseponse = []\n    })\n  return reseponse\n}\n"]},"metadata":{},"sourceType":"module"}