{"ast":null,"code":"var _jsxFileName = \"/Users/alice/Documents/rigel/src/pages/Shuttle/index.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useFromToken, useToToken } from '../../hooks/useTokenList';\nimport { useAccountStatus, useWallet } from '../../hooks/useWallet';\nimport ShuttleForm from './ShuttleForm';\nimport TokenList from './TokenList';\nimport { DefaultFromChain, DefaultToChain, SupportedChains, ChainConfig, KeyOfCfx, KeyOfBtc } from '../../constants/chainConfig';\nimport { TxReceiptModalType, TypeAccountStatus } from '../../constants';\nimport ConfirmModal from './ConfirmModal';\nimport { TransactionReceiptionModal } from '../components';\nimport { useShuttleState } from '../../state';\nimport { getChainIdRight } from '../../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Shuttle() {\n  _s();\n\n  var _ChainConfig$KeyOfBtc, _ChainConfig$KeyOfBtc2;\n\n  const location = useLocation();\n  const history = useHistory();\n  const {\n    tokenFromBackend\n  } = useShuttleState();\n  const [tokenListShow, setTokenListShow] = useState(false);\n  const [confirmModalShow, setConfirmModalShow] = useState(false);\n  const [value, setValue] = useState('');\n  const [txModalShow, setTxModalShow] = useState(false);\n  const [txModalType, setTxModalType] = useState(TxReceiptModalType.ongoing);\n  const [txHash, setTxHash] = useState('');\n  const {\n    fromChain,\n    toChain,\n    fromTokenAddress,\n    ...others\n  } = queryString.parse(location.search);\n  const {\n    address: fromAddress,\n    error: fromChainError,\n    chainId: fromChainId\n  } = useWallet(fromChain);\n  const {\n    address: toAddress,\n    error: toChainError,\n    chainId: toChainId\n  } = useWallet(toChain);\n  const isFromChainIdRight = getChainIdRight(fromChain, fromChainId, fromAddress);\n  const isToChainIdRight = getChainIdRight(toChain, toChainId, toAddress);\n  const {\n    type: fromAccountType\n  } = useAccountStatus(fromChain, fromAddress, fromChainError, isFromChainIdRight);\n  const {\n    type: toAccountType\n  } = useAccountStatus(toChain, toAddress, toChainError, isToChainIdRight);\n  const {\n    address\n  } = tokenFromBackend;\n  let fromToken = useFromToken(fromChain, toChain, fromTokenAddress);\n  if (address === fromTokenAddress) fromToken = tokenFromBackend;\n  const toToken = useToToken(fromChain, toChain, fromTokenAddress);\n  const btcTokenPair = useToToken(KeyOfBtc, KeyOfCfx, (_ChainConfig$KeyOfBtc = ChainConfig[KeyOfBtc]) === null || _ChainConfig$KeyOfBtc === void 0 ? void 0 : (_ChainConfig$KeyOfBtc2 = _ChainConfig$KeyOfBtc.tokenName) === null || _ChainConfig$KeyOfBtc2 === void 0 ? void 0 : _ChainConfig$KeyOfBtc2.toLowerCase());\n  /**\n   * 1. The fromChain and toChain must be in the SupportChains list\n   * 2. The fromChain and toChain must be different, the one must be cfx chain , another one must be not cfx chain\n   */\n\n  useEffect(() => {\n    let nFromChain = SupportedChains.indexOf(fromChain) !== -1 ? fromChain : DefaultFromChain;\n    let nToChain = SupportedChains.indexOf(toChain) !== -1 ? toChain : DefaultToChain;\n\n    if (fromChain === toChain) {\n      nFromChain = DefaultFromChain;\n      nToChain = DefaultToChain;\n    }\n\n    let nFromTokenAddress = fromTokenAddress;\n\n    if (!fromTokenAddress || Object.keys(fromToken).length === 0) {\n      var _ChainConfig$nFromCha, _ChainConfig$nFromCha2;\n\n      nFromTokenAddress = (_ChainConfig$nFromCha = ChainConfig[nFromChain]) === null || _ChainConfig$nFromCha === void 0 ? void 0 : (_ChainConfig$nFromCha2 = _ChainConfig$nFromCha.tokenName) === null || _ChainConfig$nFromCha2 === void 0 ? void 0 : _ChainConfig$nFromCha2.toLowerCase();\n    }\n\n    if (nFromChain === KeyOfCfx && nToChain === KeyOfBtc && btcTokenPair.address) {\n      nFromTokenAddress = btcTokenPair.address;\n    }\n\n    const pathWithQuery = queryString.stringifyUrl({\n      url: location.pathname,\n      query: { ...others,\n        fromChain: nFromChain,\n        toChain: nToChain,\n        fromTokenAddress: nFromTokenAddress\n      }\n    });\n    history.push(pathWithQuery); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.search, btcTokenPair.address]);\n\n  const onSelectToken = token => {\n    setTokenListShow(false);\n    const pathWithQuery = queryString.stringifyUrl({\n      url: location.pathname,\n      query: { ...others,\n        fromChain,\n        toChain,\n        fromTokenAddress: token.address\n      }\n    });\n    history.push(pathWithQuery);\n  };\n\n  const onChangeChain = (chain, type) => {\n    if (type === 'from' && chain === toChain) {\n      onInvertChain();\n      return;\n    }\n\n    let nFromTokenAddress;\n\n    if (type === 'from') {\n      var _ChainConfig$chain, _ChainConfig$chain$to;\n\n      nFromTokenAddress = (_ChainConfig$chain = ChainConfig[chain]) === null || _ChainConfig$chain === void 0 ? void 0 : (_ChainConfig$chain$to = _ChainConfig$chain.tokenName) === null || _ChainConfig$chain$to === void 0 ? void 0 : _ChainConfig$chain$to.toLowerCase();\n    }\n\n    if (type === 'to' && chain === KeyOfBtc) {\n      nFromTokenAddress = btcTokenPair === null || btcTokenPair === void 0 ? void 0 : btcTokenPair.address;\n    }\n\n    if (type === 'to' && chain !== KeyOfBtc) {\n      var _ChainConfig$fromChai, _ChainConfig$fromChai2;\n\n      nFromTokenAddress = (_ChainConfig$fromChai = ChainConfig[fromChain]) === null || _ChainConfig$fromChai === void 0 ? void 0 : (_ChainConfig$fromChai2 = _ChainConfig$fromChai.tokenName) === null || _ChainConfig$fromChai2 === void 0 ? void 0 : _ChainConfig$fromChai2.toLowerCase();\n    }\n\n    const pathWithQuery = queryString.stringifyUrl({\n      url: location.pathname,\n      query: { ...others,\n        fromChain: type === 'from' ? chain : fromChain,\n        toChain: type === 'to' ? chain : chain !== KeyOfCfx ? KeyOfCfx : toChain,\n        fromTokenAddress: nFromTokenAddress\n      }\n    });\n    history.push(pathWithQuery);\n  };\n\n  const onInvertChain = () => {\n    const pathWithQuery = queryString.stringifyUrl({\n      url: location.pathname,\n      query: { ...others,\n        fromChain: toChain,\n        toChain: fromChain,\n        fromTokenAddress: toToken === null || toToken === void 0 ? void 0 : toToken.address\n      }\n    });\n    history.push(pathWithQuery);\n    setValue('');\n  };\n  /**\n   * If the user has already in the shuttle process, and need wallet to interact with this chain\n   * In this case, if you uninstalled the wallet or the the chainid is wrong, you must go back the main router: shuttle\n   */\n\n\n  useEffect(() => {\n    if (fromAccountType !== TypeAccountStatus.success || toAccountType !== TypeAccountStatus.success) {\n      setTokenListShow(false);\n      setConfirmModalShow(false);\n    }\n  }, [fromAccountType, toAccountType]);\n  if (!fromChain) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-1 justify-center px-3 md:px-0\",\n    children: [!tokenListShow && /*#__PURE__*/_jsxDEV(ShuttleForm, {\n      fromChain: fromChain,\n      toChain: toChain,\n      fromToken: fromToken,\n      toToken: toToken,\n      onChooseToken: () => setTokenListShow(true),\n      onNextClick: () => setConfirmModalShow(true),\n      onChangeValue: value => setValue(value),\n      value: value,\n      onChangeChain: onChangeChain,\n      onInvertChain: onInvertChain,\n      fromAddress: fromAddress,\n      toAddress: toAddress,\n      fromAccountType: fromAccountType,\n      toAccountType: toAccountType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this), tokenListShow && /*#__PURE__*/_jsxDEV(TokenList, {\n      fromChain: fromChain,\n      toChain: toChain,\n      selectedToken: fromToken,\n      onSelectToken: onSelectToken,\n      onBack: () => setTokenListShow(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this), true && /*#__PURE__*/_jsxDEV(ConfirmModal, {\n      open: confirmModalShow,\n      onClose: () => setConfirmModalShow(false),\n      fromChain: fromChain,\n      toChain: toChain,\n      value: value,\n      fromToken: fromToken,\n      toToken: toToken,\n      setTxModalType: setTxModalType,\n      setTxModalShow: setTxModalShow,\n      setTxHash: setTxHash,\n      fromAddress: fromAddress,\n      toAddress: toAddress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this), txModalShow && /*#__PURE__*/_jsxDEV(TransactionReceiptionModal, {\n      type: txModalType,\n      open: txModalShow,\n      fromChain: fromChain,\n      toChain: toChain,\n      fromToken: fromToken,\n      toToken: toToken,\n      value: value,\n      txHash: txHash,\n      onClose: () => setTxModalShow(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Shuttle, \"+cUaJsBr4qdHv9Mc8XrMJZrUKFw=\", false, function () {\n  return [useLocation, useHistory, useShuttleState, useWallet, useWallet, useAccountStatus, useAccountStatus, useFromToken, useToToken, useToToken];\n});\n\n_c = Shuttle;\nexport default Shuttle;\n\nvar _c;\n\n$RefreshReg$(_c, \"Shuttle\");","map":{"version":3,"sources":["/Users/alice/Documents/rigel/src/pages/Shuttle/index.js"],"names":["useState","useEffect","queryString","useHistory","useLocation","useFromToken","useToToken","useAccountStatus","useWallet","ShuttleForm","TokenList","DefaultFromChain","DefaultToChain","SupportedChains","ChainConfig","KeyOfCfx","KeyOfBtc","TxReceiptModalType","TypeAccountStatus","ConfirmModal","TransactionReceiptionModal","useShuttleState","getChainIdRight","Shuttle","location","history","tokenFromBackend","tokenListShow","setTokenListShow","confirmModalShow","setConfirmModalShow","value","setValue","txModalShow","setTxModalShow","txModalType","setTxModalType","ongoing","txHash","setTxHash","fromChain","toChain","fromTokenAddress","others","parse","search","address","fromAddress","error","fromChainError","chainId","fromChainId","toAddress","toChainError","toChainId","isFromChainIdRight","isToChainIdRight","type","fromAccountType","toAccountType","fromToken","toToken","btcTokenPair","tokenName","toLowerCase","nFromChain","indexOf","nToChain","nFromTokenAddress","Object","keys","length","pathWithQuery","stringifyUrl","url","pathname","query","push","onSelectToken","token","onChangeChain","chain","onInvertChain","success"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react'\nimport queryString from 'query-string'\nimport {useHistory, useLocation} from 'react-router-dom'\n\nimport {useFromToken, useToToken} from '../../hooks/useTokenList'\nimport {useAccountStatus, useWallet} from '../../hooks/useWallet'\nimport ShuttleForm from './ShuttleForm'\nimport TokenList from './TokenList'\nimport {\n  DefaultFromChain,\n  DefaultToChain,\n  SupportedChains,\n  ChainConfig,\n  KeyOfCfx,\n  KeyOfBtc,\n} from '../../constants/chainConfig'\nimport {TxReceiptModalType, TypeAccountStatus} from '../../constants'\nimport ConfirmModal from './ConfirmModal'\nimport {TransactionReceiptionModal} from '../components'\nimport {useShuttleState} from '../../state'\nimport {getChainIdRight} from '../../utils'\n\nfunction Shuttle() {\n  const location = useLocation()\n  const history = useHistory()\n  const {tokenFromBackend} = useShuttleState()\n  const [tokenListShow, setTokenListShow] = useState(false)\n  const [confirmModalShow, setConfirmModalShow] = useState(false)\n  const [value, setValue] = useState('')\n  const [txModalShow, setTxModalShow] = useState(false)\n  const [txModalType, setTxModalType] = useState(TxReceiptModalType.ongoing)\n  const [txHash, setTxHash] = useState('')\n  const {fromChain, toChain, fromTokenAddress, ...others} = queryString.parse(\n    location.search,\n  )\n  const {\n    address: fromAddress,\n    error: fromChainError,\n    chainId: fromChainId,\n  } = useWallet(fromChain)\n  const {\n    address: toAddress,\n    error: toChainError,\n    chainId: toChainId,\n  } = useWallet(toChain)\n  const isFromChainIdRight = getChainIdRight(\n    fromChain,\n    fromChainId,\n    fromAddress,\n  )\n  const isToChainIdRight = getChainIdRight(toChain, toChainId, toAddress)\n  const {type: fromAccountType} = useAccountStatus(\n    fromChain,\n    fromAddress,\n    fromChainError,\n    isFromChainIdRight,\n  )\n  const {type: toAccountType} = useAccountStatus(\n    toChain,\n    toAddress,\n    toChainError,\n    isToChainIdRight,\n  )\n  const {address} = tokenFromBackend\n  let fromToken = useFromToken(fromChain, toChain, fromTokenAddress)\n  if (address === fromTokenAddress) fromToken = tokenFromBackend\n  const toToken = useToToken(fromChain, toChain, fromTokenAddress)\n  const btcTokenPair = useToToken(\n    KeyOfBtc,\n    KeyOfCfx,\n    ChainConfig[KeyOfBtc]?.tokenName?.toLowerCase(),\n  )\n\n  /**\n   * 1. The fromChain and toChain must be in the SupportChains list\n   * 2. The fromChain and toChain must be different, the one must be cfx chain , another one must be not cfx chain\n   */\n  useEffect(() => {\n    let nFromChain =\n      SupportedChains.indexOf(fromChain) !== -1 ? fromChain : DefaultFromChain\n    let nToChain =\n      SupportedChains.indexOf(toChain) !== -1 ? toChain : DefaultToChain\n    if (fromChain === toChain) {\n      nFromChain = DefaultFromChain\n      nToChain = DefaultToChain\n    }\n    let nFromTokenAddress = fromTokenAddress\n    if (!fromTokenAddress || Object.keys(fromToken).length === 0) {\n      nFromTokenAddress = ChainConfig[nFromChain]?.tokenName?.toLowerCase()\n    }\n    if (\n      nFromChain === KeyOfCfx &&\n      nToChain === KeyOfBtc &&\n      btcTokenPair.address\n    ) {\n      nFromTokenAddress = btcTokenPair.address\n    }\n    const pathWithQuery = queryString.stringifyUrl({\n      url: location.pathname,\n      query: {\n        ...others,\n        fromChain: nFromChain,\n        toChain: nToChain,\n        fromTokenAddress: nFromTokenAddress,\n      },\n    })\n    history.push(pathWithQuery)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.search, btcTokenPair.address])\n\n  const onSelectToken = token => {\n    setTokenListShow(false)\n    const pathWithQuery = queryString.stringifyUrl({\n      url: location.pathname,\n      query: {\n        ...others,\n        fromChain,\n        toChain,\n        fromTokenAddress: token.address,\n      },\n    })\n    history.push(pathWithQuery)\n  }\n\n  const onChangeChain = (chain, type) => {\n    if (type === 'from' && chain === toChain) {\n      onInvertChain()\n      return\n    }\n    let nFromTokenAddress\n    if (type === 'from') {\n      nFromTokenAddress = ChainConfig[chain]?.tokenName?.toLowerCase()\n    }\n    if (type === 'to' && chain === KeyOfBtc) {\n      nFromTokenAddress = btcTokenPair?.address\n    }\n    if (type === 'to' && chain !== KeyOfBtc) {\n      nFromTokenAddress = ChainConfig[fromChain]?.tokenName?.toLowerCase()\n    }\n    const pathWithQuery = queryString.stringifyUrl({\n      url: location.pathname,\n      query: {\n        ...others,\n        fromChain: type === 'from' ? chain : fromChain,\n        toChain:\n          type === 'to' ? chain : chain !== KeyOfCfx ? KeyOfCfx : toChain,\n        fromTokenAddress: nFromTokenAddress,\n      },\n    })\n    history.push(pathWithQuery)\n  }\n\n  const onInvertChain = () => {\n    const pathWithQuery = queryString.stringifyUrl({\n      url: location.pathname,\n      query: {\n        ...others,\n        fromChain: toChain,\n        toChain: fromChain,\n        fromTokenAddress: toToken?.address,\n      },\n    })\n    history.push(pathWithQuery)\n    setValue('')\n  }\n\n  /**\n   * If the user has already in the shuttle process, and need wallet to interact with this chain\n   * In this case, if you uninstalled the wallet or the the chainid is wrong, you must go back the main router: shuttle\n   */\n  useEffect(() => {\n    if (\n      fromAccountType !== TypeAccountStatus.success ||\n      toAccountType !== TypeAccountStatus.success\n    ) {\n      setTokenListShow(false)\n      setConfirmModalShow(false)\n    }\n  }, [fromAccountType, toAccountType])\n\n  if (!fromChain) return null\n  return (\n    <div className=\"flex flex-1 justify-center px-3 md:px-0\">\n      {!tokenListShow && (\n        <ShuttleForm\n          fromChain={fromChain}\n          toChain={toChain}\n          fromToken={fromToken}\n          toToken={toToken}\n          onChooseToken={() => setTokenListShow(true)}\n          onNextClick={() => setConfirmModalShow(true)}\n          onChangeValue={value => setValue(value)}\n          value={value}\n          onChangeChain={onChangeChain}\n          onInvertChain={onInvertChain}\n          fromAddress={fromAddress}\n          toAddress={toAddress}\n          fromAccountType={fromAccountType}\n          toAccountType={toAccountType}\n        />\n      )}\n      {tokenListShow && (\n        <TokenList\n          fromChain={fromChain}\n          toChain={toChain}\n          selectedToken={fromToken}\n          onSelectToken={onSelectToken}\n          onBack={() => setTokenListShow(false)}\n        />\n      )}\n      {true && (\n        <ConfirmModal\n          open={confirmModalShow}\n          onClose={() => setConfirmModalShow(false)}\n          fromChain={fromChain}\n          toChain={toChain}\n          value={value}\n          fromToken={fromToken}\n          toToken={toToken}\n          setTxModalType={setTxModalType}\n          setTxModalShow={setTxModalShow}\n          setTxHash={setTxHash}\n          fromAddress={fromAddress}\n          toAddress={toAddress}\n        />\n      )}\n      {txModalShow && (\n        <TransactionReceiptionModal\n          type={txModalType}\n          open={txModalShow}\n          fromChain={fromChain}\n          toChain={toChain}\n          fromToken={fromToken}\n          toToken={toToken}\n          value={value}\n          txHash={txHash}\n          onClose={() => setTxModalShow(false)}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default Shuttle\n"]},"metadata":{},"sourceType":"module"}