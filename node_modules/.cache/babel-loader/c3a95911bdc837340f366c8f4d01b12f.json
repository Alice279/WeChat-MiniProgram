{"ast":null,"code":"// This was ported from https://github.com/MaiaVictor/eth-lib, with some minor\n// modifications to ESM module. It is licensed under MIT:\n//\n// Copyright 2017 Victor Maia\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nconst at = (bytes, index) => parseInt(bytes.slice(index * 2 + 2, index * 2 + 4), 16);\n\nconst random = bytes => {\n  let rnd;\n  if (typeof window !== 'undefined' && window.crypto && window.crypto.getRandomValues) rnd = window.crypto.getRandomValues(new Uint8Array(bytes)); // else if (typeof require !== 'undefined')\n  //   rnd = require('c' + 'rypto').randomBytes(bytes)\n  else {\n      throw 'Safe random numbers not available.';\n    }\n  let hex = '0x';\n\n  for (let i = 0; i < bytes; ++i) hex += ('00' + rnd[i].toString(16)).slice(-2);\n\n  return hex;\n};\n\nconst length = a => (a.length - 2) / 2;\n\nconst flatten = a => '0x' + a.reduce((r, s) => r + s.slice(2), '');\n\nconst slice = (i, j, bs) => '0x' + bs.slice(i * 2 + 2, j * 2 + 2);\n\nconst reverse = hex => {\n  let rev = '0x';\n\n  for (let i = 0, l = length(hex); i < l; ++i) {\n    rev += hex.slice((l - i) * 2, (l - i + 1) * 2);\n  }\n\n  return rev;\n};\n\nconst pad = (l, hex) => hex.length === l * 2 + 2 ? hex : pad(l, '0x' + '0' + hex.slice(2));\n\nconst padRight = (l, hex) => hex.length === l * 2 + 2 ? hex : padRight(l, hex + '0');\n\nconst toArray = hex => {\n  let arr = [];\n\n  for (let i = 2, l = hex.length; i < l; i += 2) arr.push(parseInt(hex.slice(i, i + 2), 16));\n\n  return arr;\n};\n\nconst fromArray = arr => {\n  let hex = '0x';\n\n  for (let i = 0, l = arr.length; i < l; ++i) {\n    let b = arr[i];\n    hex += (b < 16 ? '0' : '') + b.toString(16);\n  }\n\n  return hex;\n};\n\nconst toUint8Array = hex => new Uint8Array(toArray(hex));\n\nconst fromUint8Array = arr => fromArray([].slice.call(arr, 0));\n\nconst fromNumber = num => {\n  let hex = num.toString(16);\n  return hex.length % 2 === 0 ? '0x' + hex : '0x0' + hex;\n};\n\nconst toNumber = hex => parseInt(hex.slice(2), 16);\n\nconst concat = (a, b) => a.concat(b.slice(2));\n\nconst fromNat = bn => bn === '0x0' ? '0x' : bn.length % 2 === 0 ? bn : '0x0' + bn.slice(2);\n\nconst toNat = bn => bn[2] === '0' ? '0x' + bn.slice(3) : bn;\n\nconst fromAscii = ascii => {\n  let hex = '0x';\n\n  for (let i = 0; i < ascii.length; ++i) hex += ('00' + ascii.charCodeAt(i).toString(16)).slice(-2);\n\n  return hex;\n};\n\nconst toAscii = hex => {\n  let ascii = '';\n\n  for (let i = 2; i < hex.length; i += 2) ascii += String.fromCharCode(parseInt(hex.slice(i, i + 2), 16));\n\n  return ascii;\n}; // From https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330\n\n\nconst fromString = s => {\n  const makeByte = uint8 => {\n    const b = uint8.toString(16);\n    return b.length < 2 ? '0' + b : b;\n  };\n\n  let bytes = '0x';\n\n  for (let ci = 0; ci != s.length; ci++) {\n    let c = s.charCodeAt(ci);\n\n    if (c < 128) {\n      bytes += makeByte(c);\n      continue;\n    }\n\n    if (c < 2048) {\n      bytes += makeByte(c >> 6 | 192);\n    } else {\n      if (c > 0xd7ff && c < 0xdc00) {\n        if (++ci == s.length) return null;\n        let c2 = s.charCodeAt(ci);\n        if (c2 < 0xdc00 || c2 > 0xdfff) return null;\n        c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n        bytes += makeByte(c >> 18 | 240);\n        bytes += makeByte(c >> 12 & 63 | 128);\n      } else {\n        // c <= 0xffff\n        bytes += makeByte(c >> 12 | 224);\n      }\n\n      bytes += makeByte(c >> 6 & 63 | 128);\n    }\n\n    bytes += makeByte(c & 63 | 128);\n  }\n\n  return bytes;\n};\n\nconst toString = bytes => {\n  let s = '';\n  let i = 0;\n  let l = length(bytes);\n\n  while (i < l) {\n    let c = at(bytes, i++);\n\n    if (c > 127) {\n      if (c > 191 && c < 224) {\n        if (i >= l) return null;\n        c = (c & 31) << 6 | at(bytes, i) & 63;\n      } else if (c > 223 && c < 240) {\n        if (i + 1 >= l) return null;\n        c = (c & 15) << 12 | (at(bytes, i) & 63) << 6 | at(bytes, ++i) & 63;\n      } else if (c > 239 && c < 248) {\n        if (i + 2 >= l) return null;\n        c = (c & 7) << 18 | (at(bytes, i) & 63) << 12 | (at(bytes, ++i) & 63) << 6 | at(bytes, ++i) & 63;\n      } else return null;\n\n      ++i;\n    }\n\n    if (c <= 0xffff) s += String.fromCharCode(c);else if (c <= 0x10ffff) {\n      c -= 0x10000;\n      s += String.fromCharCode(c >> 10 | 0xd800);\n      s += String.fromCharCode(c & 0x3ff | 0xdc00);\n    } else return null;\n  }\n\n  return s;\n};\n\nexport { random, length, concat, flatten, slice, reverse, pad, padRight, fromAscii, toAscii, fromString, toString, fromNumber, toNumber, fromNat, toNat, fromArray, toArray, fromUint8Array, toUint8Array };","map":{"version":3,"sources":["/Users/alice/Documents/rigel/node_modules/@cfxjs/bytes/index.js"],"names":["at","bytes","index","parseInt","slice","random","rnd","window","crypto","getRandomValues","Uint8Array","hex","i","toString","length","a","flatten","reduce","r","s","j","bs","reverse","rev","l","pad","padRight","toArray","arr","push","fromArray","b","toUint8Array","fromUint8Array","call","fromNumber","num","toNumber","concat","fromNat","bn","toNat","fromAscii","ascii","charCodeAt","toAscii","String","fromCharCode","fromString","makeByte","uint8","ci","c","c2"],"mappings":"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","sourcesContent":["// This was ported from https://github.com/MaiaVictor/eth-lib, with some minor\n// modifications to ESM module. It is licensed under MIT:\n//\n// Copyright 2017 Victor Maia\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst at = (bytes, index) =>\n  parseInt(bytes.slice(index * 2 + 2, index * 2 + 4), 16)\n\nconst random = bytes => {\n  let rnd\n  if (\n    typeof window !== 'undefined' &&\n    window.crypto &&\n    window.crypto.getRandomValues\n  )\n    rnd = window.crypto.getRandomValues(new Uint8Array(bytes))\n  // else if (typeof require !== 'undefined')\n  //   rnd = require('c' + 'rypto').randomBytes(bytes)\n  else {\n    throw 'Safe random numbers not available.'\n  }\n  let hex = '0x'\n  for (let i = 0; i < bytes; ++i) hex += ('00' + rnd[i].toString(16)).slice(-2)\n  return hex\n}\n\nconst length = a => (a.length - 2) / 2\n\nconst flatten = a => '0x' + a.reduce((r, s) => r + s.slice(2), '')\n\nconst slice = (i, j, bs) => '0x' + bs.slice(i * 2 + 2, j * 2 + 2)\n\nconst reverse = hex => {\n  let rev = '0x'\n  for (let i = 0, l = length(hex); i < l; ++i) {\n    rev += hex.slice((l - i) * 2, (l - i + 1) * 2)\n  }\n  return rev\n}\n\nconst pad = (l, hex) =>\n  hex.length === l * 2 + 2 ? hex : pad(l, '0x' + '0' + hex.slice(2))\n\nconst padRight = (l, hex) =>\n  hex.length === l * 2 + 2 ? hex : padRight(l, hex + '0')\n\nconst toArray = hex => {\n  let arr = []\n  for (let i = 2, l = hex.length; i < l; i += 2)\n    arr.push(parseInt(hex.slice(i, i + 2), 16))\n  return arr\n}\n\nconst fromArray = arr => {\n  let hex = '0x'\n  for (let i = 0, l = arr.length; i < l; ++i) {\n    let b = arr[i]\n    hex += (b < 16 ? '0' : '') + b.toString(16)\n  }\n  return hex\n}\n\nconst toUint8Array = hex => new Uint8Array(toArray(hex))\n\nconst fromUint8Array = arr => fromArray([].slice.call(arr, 0))\n\nconst fromNumber = num => {\n  let hex = num.toString(16)\n  return hex.length % 2 === 0 ? '0x' + hex : '0x0' + hex\n}\n\nconst toNumber = hex => parseInt(hex.slice(2), 16)\n\nconst concat = (a, b) => a.concat(b.slice(2))\n\nconst fromNat = bn =>\n  bn === '0x0' ? '0x' : bn.length % 2 === 0 ? bn : '0x0' + bn.slice(2)\n\nconst toNat = bn => (bn[2] === '0' ? '0x' + bn.slice(3) : bn)\n\nconst fromAscii = ascii => {\n  let hex = '0x'\n  for (let i = 0; i < ascii.length; ++i)\n    hex += ('00' + ascii.charCodeAt(i).toString(16)).slice(-2)\n  return hex\n}\n\nconst toAscii = hex => {\n  let ascii = ''\n  for (let i = 2; i < hex.length; i += 2)\n    ascii += String.fromCharCode(parseInt(hex.slice(i, i + 2), 16))\n  return ascii\n}\n\n// From https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330\nconst fromString = s => {\n  const makeByte = uint8 => {\n    const b = uint8.toString(16)\n    return b.length < 2 ? '0' + b : b\n  }\n  let bytes = '0x'\n  for (let ci = 0; ci != s.length; ci++) {\n    let c = s.charCodeAt(ci)\n    if (c < 128) {\n      bytes += makeByte(c)\n      continue\n    }\n    if (c < 2048) {\n      bytes += makeByte((c >> 6) | 192)\n    } else {\n      if (c > 0xd7ff && c < 0xdc00) {\n        if (++ci == s.length) return null\n        let c2 = s.charCodeAt(ci)\n        if (c2 < 0xdc00 || c2 > 0xdfff) return null\n        c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff)\n        bytes += makeByte((c >> 18) | 240)\n        bytes += makeByte(((c >> 12) & 63) | 128)\n      } else {\n        // c <= 0xffff\n        bytes += makeByte((c >> 12) | 224)\n      }\n      bytes += makeByte(((c >> 6) & 63) | 128)\n    }\n    bytes += makeByte((c & 63) | 128)\n  }\n  return bytes\n}\n\nconst toString = bytes => {\n  let s = ''\n  let i = 0\n  let l = length(bytes)\n  while (i < l) {\n    let c = at(bytes, i++)\n    if (c > 127) {\n      if (c > 191 && c < 224) {\n        if (i >= l) return null\n        c = ((c & 31) << 6) | (at(bytes, i) & 63)\n      } else if (c > 223 && c < 240) {\n        if (i + 1 >= l) return null\n        c =\n          ((c & 15) << 12) | ((at(bytes, i) & 63) << 6) | (at(bytes, ++i) & 63)\n      } else if (c > 239 && c < 248) {\n        if (i + 2 >= l) return null\n        c =\n          ((c & 7) << 18) |\n          ((at(bytes, i) & 63) << 12) |\n          ((at(bytes, ++i) & 63) << 6) |\n          (at(bytes, ++i) & 63)\n      } else return null\n      ++i\n    }\n    if (c <= 0xffff) s += String.fromCharCode(c)\n    else if (c <= 0x10ffff) {\n      c -= 0x10000\n      s += String.fromCharCode((c >> 10) | 0xd800)\n      s += String.fromCharCode((c & 0x3ff) | 0xdc00)\n    } else return null\n  }\n  return s\n}\n\nexport {\n  random,\n  length,\n  concat,\n  flatten,\n  slice,\n  reverse,\n  pad,\n  padRight,\n  fromAscii,\n  toAscii,\n  fromString,\n  toString,\n  fromNumber,\n  toNumber,\n  fromNat,\n  toNat,\n  fromArray,\n  toArray,\n  fromUint8Array,\n  toUint8Array,\n}\n"]},"metadata":{},"sourceType":"module"}