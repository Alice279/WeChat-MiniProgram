{"ast":null,"code":"var _jsxFileName = \"/Users/alice/Documents/rigel/src/pages/Shuttle/ConfirmModal/ShuttleButton/In.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport { convertDecimal } from '@cfxjs/data-format';\nimport { format } from 'js-conflux-sdk/dist/js-conflux-sdk.umd.min.js';\nimport Big from 'big.js';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { MaxUint256 } from '@ethersproject/constants';\nimport { Logger } from '@ethersproject/logger';\nimport { Button, Loading } from '../../../../components';\nimport { Send } from '../../../../assets/svg';\nimport { SupportedChains } from '../../../../constants/chainConfig';\nimport { ContractConfig, ContractType } from '../../../../constants/contractConfig';\nimport { ZeroAddrHex, TxReceiptModalType } from '../../../../constants';\nimport { useIsNativeToken } from '../../../../hooks/useWallet';\nimport { useTokenContract, useTokenAllowance } from '../../../../hooks/useWeb3Network';\nimport { calculateGasMargin, getExponent } from '../../../../utils';\nimport { useShuttleContract } from '../../../../hooks/useShuttleContract';\nimport { useIsCfxChain } from '../../../../hooks';\nimport useShuttleAddress from '../../../../hooks/useShuttleAddress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ShuttleInButton({\n  fromChain,\n  toChain,\n  fromToken,\n  value,\n  onClose,\n  disabled,\n  setTxModalType,\n  setTxModalShow,\n  setTxHash,\n  fromAddress,\n  toAddress\n}) {\n  _s();\n\n  var _ContractConfig$Contr, _ContractConfig$Contr2;\n\n  const {\n    t\n  } = useTranslation();\n  const [approveShown, setApproveShown] = useState(false);\n  const [isApproving, setIsApproving] = useState(false);\n  const [didMount, setDidMount] = useState(false);\n  const {\n    address: fromTokenAddress,\n    decimals,\n    display_symbol,\n    origin\n  } = fromToken;\n  const isCfxChain = useIsCfxChain(origin);\n  const isNativeToken = useIsNativeToken(fromChain, fromTokenAddress);\n  const drContractAddress = (_ContractConfig$Contr = ContractConfig[ContractType.depositRelayer]) === null || _ContractConfig$Contr === void 0 ? void 0 : (_ContractConfig$Contr2 = _ContractConfig$Contr.address) === null || _ContractConfig$Contr2 === void 0 ? void 0 : _ContractConfig$Contr2[fromChain];\n  const drContract = useShuttleContract(ContractType.depositRelayer, fromChain);\n  const tokenContract = useTokenContract(fromTokenAddress);\n  const tokenAllownace = useTokenAllowance(fromTokenAddress, [fromAddress, drContractAddress]);\n  const shuttleAddress = useShuttleAddress(toAddress, toChain, fromChain, 'in');\n  useEffect(() => {\n    setDidMount(true);\n\n    if (!isNativeToken) {\n      if (new Big(tokenAllownace.toString(10)).lt(new Big(value).times(getExponent(decimals)))) {\n        setApproveShown(true);\n      } else {\n        setApproveShown(false);\n      }\n    }\n\n    return () => {\n      setDidMount(false);\n    };\n  }, [decimals, tokenAllownace.toString(10), value, isNativeToken]);\n\n  function contractApprove(tokenContract, value, gas) {\n    tokenContract.approve(drContractAddress, value, {\n      gasLimit: gas ? calculateGasMargin(gas) : undefined\n    }).then(txResponse => {\n      txResponse && txResponse.wait().then(() => {\n        setIsApproving(false);\n        setApproveShown(false);\n      }).catch(() => {\n        setIsApproving(false);\n      });\n    }).catch(() => {\n      setIsApproving(false);\n    });\n  }\n\n  const onApprove = async () => {\n    if (isApproving) return;\n    setIsApproving(true); //MaxUint256\n\n    tokenContract.estimateGas.approve(drContractAddress, MaxUint256).then(gas => {\n      contractApprove(tokenContract, MaxUint256, gas);\n    }).catch(error => {\n      if (error.code === Logger.errors.UNPREDICTABLE_GAS_LIMIT || error.data && error.data.code === -32000) {\n        contractApprove(tokenContract, 0);\n      } else {\n        setIsApproving(false);\n      }\n    });\n  };\n\n  const onSubmit = async () => {\n    setTxModalType(TxReceiptModalType.ongoing);\n\n    if (isNativeToken) {\n      let params = [format.hexAddress(toAddress), ZeroAddrHex, {\n        value: convertDecimal(value, 'multiply', decimals)\n      }];\n      let gas = await drContract.estimateGas.deposit(params[0], params[1], params[2]);\n      setTxModalShow(true);\n      drContract.deposit(params[0], params[1], { ...params[2],\n        gasLimit: calculateGasMargin(gas)\n      }).then(data => {\n        setTxHash(data.hash);\n        setTxModalType(TxReceiptModalType.success);\n      }).catch(() => {\n        setTxModalType(TxReceiptModalType.error);\n      });\n    } else {\n      if (!isCfxChain) {\n        let params = [fromTokenAddress, format.hexAddress(toAddress), ZeroAddrHex, convertDecimal(value, 'multiply', decimals), {\n          value: BigNumber.from(0)\n        }];\n        let gasDt = await drContract.estimateGas.depositToken(params[0], params[1], params[2], params[3], params[4]);\n        setTxModalShow(true);\n        drContract.depositToken(params[0], params[1], params[2], params[3], { ...params[4],\n          gasLimit: calculateGasMargin(gasDt)\n        }).then(data => {\n          setTxHash(data === null || data === void 0 ? void 0 : data.hash);\n          setTxModalType(TxReceiptModalType.success);\n        }).catch(() => {\n          setTxModalType(TxReceiptModalType.error);\n        });\n      } else {\n        const amountVal = convertDecimal(value, 'multiply', decimals);\n        setTxModalShow(true);\n\n        try {\n          const data = await tokenContract.transfer(shuttleAddress, amountVal);\n          setTxHash(data === null || data === void 0 ? void 0 : data.hash);\n          setTxModalType(TxReceiptModalType.success);\n        } catch {\n          setTxModalType(TxReceiptModalType.error);\n        }\n      }\n    }\n\n    onClose && onClose();\n  };\n\n  if (!didMount) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [approveShown && /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onApprove,\n      disabled: disabled,\n      size: \"large\",\n      id: \"approve\",\n      children: [isApproving && /*#__PURE__*/_jsxDEV(Loading, {\n        className: \"!w-6 !h-6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 27\n      }, this), !isApproving && t('approve', {\n        tokenSymbol: display_symbol\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this), !approveShown && /*#__PURE__*/_jsxDEV(Button, {\n      id: \"shuttleIn\",\n      startIcon: /*#__PURE__*/_jsxDEV(Send, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 22\n      }, this),\n      onClick: onSubmit,\n      disabled: disabled,\n      size: \"large\",\n      children: t('send')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ShuttleInButton, \"5LE/K71mNJiyxbsYNddin/Yq5yo=\", false, function () {\n  return [useTranslation, useIsCfxChain, useIsNativeToken, useShuttleContract, useTokenContract, useTokenAllowance, useShuttleAddress];\n});\n\n_c = ShuttleInButton;\nShuttleInButton.propTypes = {\n  fromChain: PropTypes.oneOf(SupportedChains).isRequired,\n  toChain: PropTypes.oneOf(SupportedChains).isRequired,\n  fromToken: PropTypes.object.isRequired,\n  value: PropTypes.string.isRequired,\n  onClose: PropTypes.func,\n  disabled: PropTypes.bool,\n  setTxModalType: PropTypes.func,\n  setTxHash: PropTypes.func,\n  setTxModalShow: PropTypes.func,\n  fromAddress: PropTypes.string,\n  toAddress: PropTypes.string\n};\nexport default ShuttleInButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShuttleInButton\");","map":{"version":3,"sources":["/Users/alice/Documents/rigel/src/pages/Shuttle/ConfirmModal/ShuttleButton/In.js"],"names":["useState","useEffect","PropTypes","useTranslation","convertDecimal","format","Big","BigNumber","MaxUint256","Logger","Button","Loading","Send","SupportedChains","ContractConfig","ContractType","ZeroAddrHex","TxReceiptModalType","useIsNativeToken","useTokenContract","useTokenAllowance","calculateGasMargin","getExponent","useShuttleContract","useIsCfxChain","useShuttleAddress","ShuttleInButton","fromChain","toChain","fromToken","value","onClose","disabled","setTxModalType","setTxModalShow","setTxHash","fromAddress","toAddress","t","approveShown","setApproveShown","isApproving","setIsApproving","didMount","setDidMount","address","fromTokenAddress","decimals","display_symbol","origin","isCfxChain","isNativeToken","drContractAddress","depositRelayer","drContract","tokenContract","tokenAllownace","shuttleAddress","toString","lt","times","contractApprove","gas","approve","gasLimit","undefined","then","txResponse","wait","catch","onApprove","estimateGas","error","code","errors","UNPREDICTABLE_GAS_LIMIT","data","onSubmit","ongoing","params","hexAddress","deposit","hash","success","from","gasDt","depositToken","amountVal","transfer","tokenSymbol","propTypes","oneOf","isRequired","object","string","func","bool"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport {useState, useEffect} from 'react'\nimport PropTypes from 'prop-types'\nimport {useTranslation} from 'react-i18next'\nimport {convertDecimal} from '@cfxjs/data-format'\nimport {format} from 'js-conflux-sdk/dist/js-conflux-sdk.umd.min.js'\nimport Big from 'big.js'\nimport {BigNumber} from '@ethersproject/bignumber'\nimport {MaxUint256} from '@ethersproject/constants'\nimport {Logger} from '@ethersproject/logger'\n\nimport {Button, Loading} from '../../../../components'\nimport {Send} from '../../../../assets/svg'\nimport {SupportedChains} from '../../../../constants/chainConfig'\nimport {\n  ContractConfig,\n  ContractType,\n} from '../../../../constants/contractConfig'\n\nimport {ZeroAddrHex, TxReceiptModalType} from '../../../../constants'\nimport {useIsNativeToken} from '../../../../hooks/useWallet'\nimport {\n  useTokenContract,\n  useTokenAllowance,\n} from '../../../../hooks/useWeb3Network'\nimport {calculateGasMargin, getExponent} from '../../../../utils'\nimport {useShuttleContract} from '../../../../hooks/useShuttleContract'\nimport {useIsCfxChain} from '../../../../hooks'\nimport useShuttleAddress from '../../../../hooks/useShuttleAddress'\n\nfunction ShuttleInButton({\n  fromChain,\n  toChain,\n  fromToken,\n  value,\n  onClose,\n  disabled,\n  setTxModalType,\n  setTxModalShow,\n  setTxHash,\n  fromAddress,\n  toAddress,\n}) {\n  const {t} = useTranslation()\n  const [approveShown, setApproveShown] = useState(false)\n  const [isApproving, setIsApproving] = useState(false)\n  const [didMount, setDidMount] = useState(false)\n  const {\n    address: fromTokenAddress,\n    decimals,\n    display_symbol,\n    origin,\n  } = fromToken\n  const isCfxChain = useIsCfxChain(origin)\n  const isNativeToken = useIsNativeToken(fromChain, fromTokenAddress)\n  const drContractAddress =\n    ContractConfig[ContractType.depositRelayer]?.address?.[fromChain]\n  const drContract = useShuttleContract(ContractType.depositRelayer, fromChain)\n  const tokenContract = useTokenContract(fromTokenAddress)\n  const tokenAllownace = useTokenAllowance(fromTokenAddress, [\n    fromAddress,\n    drContractAddress,\n  ])\n  const shuttleAddress = useShuttleAddress(toAddress, toChain, fromChain, 'in')\n  useEffect(() => {\n    setDidMount(true)\n    if (!isNativeToken) {\n      if (\n        new Big(tokenAllownace.toString(10)).lt(\n          new Big(value).times(getExponent(decimals)),\n        )\n      ) {\n        setApproveShown(true)\n      } else {\n        setApproveShown(false)\n      }\n    }\n    return () => {\n      setDidMount(false)\n    }\n  }, [decimals, tokenAllownace.toString(10), value, isNativeToken])\n\n  function contractApprove(tokenContract, value, gas) {\n    tokenContract\n      .approve(drContractAddress, value, {\n        gasLimit: gas ? calculateGasMargin(gas) : undefined,\n      })\n      .then(txResponse => {\n        txResponse &&\n          txResponse\n            .wait()\n            .then(() => {\n              setIsApproving(false)\n              setApproveShown(false)\n            })\n            .catch(() => {\n              setIsApproving(false)\n            })\n      })\n      .catch(() => {\n        setIsApproving(false)\n      })\n  }\n\n  const onApprove = async () => {\n    if (isApproving) return\n    setIsApproving(true)\n    //MaxUint256\n    tokenContract.estimateGas\n      .approve(drContractAddress, MaxUint256)\n      .then(gas => {\n        contractApprove(tokenContract, MaxUint256, gas)\n      })\n      .catch(error => {\n        if (\n          error.code === Logger.errors.UNPREDICTABLE_GAS_LIMIT ||\n          (error.data && error.data.code === -32000)\n        ) {\n          contractApprove(tokenContract, 0)\n        } else {\n          setIsApproving(false)\n        }\n      })\n  }\n\n  const onSubmit = async () => {\n    setTxModalType(TxReceiptModalType.ongoing)\n    if (isNativeToken) {\n      let params = [\n        format.hexAddress(toAddress),\n        ZeroAddrHex,\n        {\n          value: convertDecimal(value, 'multiply', decimals),\n        },\n      ]\n      let gas = await drContract.estimateGas.deposit(\n        params[0],\n        params[1],\n        params[2],\n      )\n      setTxModalShow(true)\n      drContract\n        .deposit(params[0], params[1], {\n          ...params[2],\n          gasLimit: calculateGasMargin(gas),\n        })\n        .then(data => {\n          setTxHash(data.hash)\n          setTxModalType(TxReceiptModalType.success)\n        })\n        .catch(() => {\n          setTxModalType(TxReceiptModalType.error)\n        })\n    } else {\n      if (!isCfxChain) {\n        let params = [\n          fromTokenAddress,\n          format.hexAddress(toAddress),\n          ZeroAddrHex,\n          convertDecimal(value, 'multiply', decimals),\n          {\n            value: BigNumber.from(0),\n          },\n        ]\n        let gasDt = await drContract.estimateGas.depositToken(\n          params[0],\n          params[1],\n          params[2],\n          params[3],\n          params[4],\n        )\n        setTxModalShow(true)\n        drContract\n          .depositToken(params[0], params[1], params[2], params[3], {\n            ...params[4],\n            gasLimit: calculateGasMargin(gasDt),\n          })\n          .then(data => {\n            setTxHash(data?.hash)\n            setTxModalType(TxReceiptModalType.success)\n          })\n          .catch(() => {\n            setTxModalType(TxReceiptModalType.error)\n          })\n      } else {\n        const amountVal = convertDecimal(value, 'multiply', decimals)\n        setTxModalShow(true)\n        try {\n          const data = await tokenContract.transfer(shuttleAddress, amountVal)\n          setTxHash(data?.hash)\n          setTxModalType(TxReceiptModalType.success)\n        } catch {\n          setTxModalType(TxReceiptModalType.error)\n        }\n      }\n    }\n    onClose && onClose()\n  }\n\n  if (!didMount) {\n    return null\n  }\n\n  return (\n    <>\n      {approveShown && (\n        <Button\n          onClick={onApprove}\n          disabled={disabled}\n          size=\"large\"\n          id=\"approve\"\n        >\n          {isApproving && <Loading className=\"!w-6 !h-6\" />}\n          {!isApproving && t('approve', {tokenSymbol: display_symbol})}\n        </Button>\n      )}\n      {!approveShown && (\n        <Button\n          id=\"shuttleIn\"\n          startIcon={<Send />}\n          onClick={onSubmit}\n          disabled={disabled}\n          size=\"large\"\n        >\n          {t('send')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nShuttleInButton.propTypes = {\n  fromChain: PropTypes.oneOf(SupportedChains).isRequired,\n  toChain: PropTypes.oneOf(SupportedChains).isRequired,\n  fromToken: PropTypes.object.isRequired,\n  value: PropTypes.string.isRequired,\n  onClose: PropTypes.func,\n  disabled: PropTypes.bool,\n  setTxModalType: PropTypes.func,\n  setTxHash: PropTypes.func,\n  setTxModalShow: PropTypes.func,\n  fromAddress: PropTypes.string,\n  toAddress: PropTypes.string,\n}\n\nexport default ShuttleInButton\n"]},"metadata":{},"sourceType":"module"}