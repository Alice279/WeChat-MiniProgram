{"ast":null,"code":"import jsonRpc from './request';\nimport { ZeroAddrHex } from '../constants';\nexport function requestAllTokenList(url) {\n  return jsonRpc(url, 'getTokenList', []);\n}\nexport function requestToken(url, fromChain, toChain, address) {\n  return jsonRpc(url, 'searchToken', [fromChain, toChain, address]);\n}\n/**\n *\n * @param {*} url api url\n * @param {*} address (String) user conflux address (shuttle-in) or external chain address (shuttle-out)\n * @param {*} defi (String) conflux defi address (for shuttleflow frontend, hard code zero address)\n * @param {*} fromChain (String) source chain (\"btc\" | \"cfx\")\n * @param {*} toChain  (String) target chain (\"cfx\" | \"eth\" | \"bsc\")\n * @param {*} type (String) \"in\" | \"out\"\n */\n\nexport function requestUserWallet(url, address, defi = ZeroAddrHex, fromChain, toChain, type) {\n  return jsonRpc(url, 'getUserWallet', [address, defi, fromChain, toChain, type]);\n}","map":{"version":3,"sources":["/Users/alice/Documents/rigel/src/utils/api.js"],"names":["jsonRpc","ZeroAddrHex","requestAllTokenList","url","requestToken","fromChain","toChain","address","requestUserWallet","defi","type"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,SAAQC,WAAR,QAA0B,cAA1B;AAEA,OAAO,SAASC,mBAAT,CAA6BC,GAA7B,EAAkC;AACvC,SAAOH,OAAO,CAACG,GAAD,EAAM,cAAN,EAAsB,EAAtB,CAAd;AACD;AAED,OAAO,SAASC,YAAT,CAAsBD,GAAtB,EAA2BE,SAA3B,EAAsCC,OAAtC,EAA+CC,OAA/C,EAAwD;AAC7D,SAAOP,OAAO,CAACG,GAAD,EAAM,aAAN,EAAqB,CAACE,SAAD,EAAYC,OAAZ,EAAqBC,OAArB,CAArB,CAAd;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CACLL,GADK,EAELI,OAFK,EAGLE,IAAI,GAAGR,WAHF,EAILI,SAJK,EAKLC,OALK,EAMLI,IANK,EAOL;AACA,SAAOV,OAAO,CAACG,GAAD,EAAM,eAAN,EAAuB,CACnCI,OADmC,EAEnCE,IAFmC,EAGnCJ,SAHmC,EAInCC,OAJmC,EAKnCI,IALmC,CAAvB,CAAd;AAOD","sourcesContent":["import jsonRpc from './request'\nimport {ZeroAddrHex} from '../constants'\n\nexport function requestAllTokenList(url) {\n  return jsonRpc(url, 'getTokenList', [])\n}\n\nexport function requestToken(url, fromChain, toChain, address) {\n  return jsonRpc(url, 'searchToken', [fromChain, toChain, address])\n}\n\n/**\n *\n * @param {*} url api url\n * @param {*} address (String) user conflux address (shuttle-in) or external chain address (shuttle-out)\n * @param {*} defi (String) conflux defi address (for shuttleflow frontend, hard code zero address)\n * @param {*} fromChain (String) source chain (\"btc\" | \"cfx\")\n * @param {*} toChain  (String) target chain (\"cfx\" | \"eth\" | \"bsc\")\n * @param {*} type (String) \"in\" | \"out\"\n */\nexport function requestUserWallet(\n  url,\n  address,\n  defi = ZeroAddrHex,\n  fromChain,\n  toChain,\n  type,\n) {\n  return jsonRpc(url, 'getUserWallet', [\n    address,\n    defi,\n    fromChain,\n    toChain,\n    type,\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}