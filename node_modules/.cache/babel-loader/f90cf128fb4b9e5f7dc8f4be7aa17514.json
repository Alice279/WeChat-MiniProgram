{"ast":null,"code":"var _jsxFileName = \"/Users/alice/Documents/rigel/src/components/Message/index.js\";\nimport Notification from 'rc-notification';\nimport { Loading } from '../../components';\nimport { ErrorFilled, SuccessFilled, WarningFilled, InfoFilled } from '../../assets/svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IconTypes = ['info', 'success', 'error', 'warning', 'loading'];\nlet messageInstance;\nlet defaultDuration = 3;\nlet defaultTop = 20;\nlet key = 1;\nlet defaultTransitionName = 'animation-move-up';\nlet defaultGetContainer;\nlet defaultMaxCount;\nexport function getKeyThenIncreaseKey() {\n  return key++;\n}\n\nfunction setMessageConfig(options) {\n  if (options.top !== undefined) {\n    defaultTop = options.top; // delete messageInstance for new defaultTop\n\n    messageInstance = null;\n  }\n\n  if (options.duration !== undefined) {\n    defaultDuration = options.duration;\n  }\n\n  if (options.getContainer !== undefined) {\n    defaultGetContainer = options.getContainer;\n  }\n\n  if (options.transitionName !== undefined) {\n    defaultTransitionName = options.transitionName; // delete messageInstance for new transitionName\n\n    messageInstance = null;\n  }\n\n  if (options.maxCount !== undefined) {\n    defaultMaxCount = options.maxCount;\n    messageInstance = null;\n  }\n}\n\nfunction getRCNotificationInstance(args, callback) {\n  const {\n    getContainer = defaultGetContainer,\n    transitionName = defaultTransitionName,\n    maxCount = defaultMaxCount\n  } = args;\n  const prefixCls = 'message';\n\n  if (messageInstance) {\n    callback({\n      instance: messageInstance\n    });\n    return;\n  }\n\n  const instanceConfig = {\n    prefixCls,\n    transitionName,\n    style: {\n      top: defaultTop\n    },\n    getContainer,\n    maxCount,\n    className: 'absolute w-full flex justify-center'\n  };\n  Notification.newInstance(instanceConfig, instance => {\n    if (messageInstance) {\n      callback({\n        instance\n      });\n      return;\n    }\n\n    messageInstance = instance;\n    callback({\n      instance\n    });\n  });\n}\n\nconst typeToIcon = {\n  success: /*#__PURE__*/_jsxDEV(SuccessFilled, {\n    className: \"w-5 h-5 mr-2\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 12\n  }, this),\n  info: /*#__PURE__*/_jsxDEV(InfoFilled, {\n    className: \"w-5 h-5 mr-2\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this),\n  error: /*#__PURE__*/_jsxDEV(ErrorFilled, {\n    className: \"w-5 h-5 mr-2\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 10\n  }, this),\n  warning: /*#__PURE__*/_jsxDEV(WarningFilled, {\n    className: \"w-5 h-5 mr-2\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 12\n  }, this)\n};\n\nfunction getRCNoticeProps(args) {\n  const {\n    duration: durationArg,\n    type,\n    key,\n    content,\n    style = {},\n    className = '',\n    onClose,\n    onClick,\n    icon\n  } = args;\n  const duration = durationArg === undefined ? defaultDuration : durationArg;\n  const IconComponent = type === 'loading' ? /*#__PURE__*/_jsxDEV(Loading, {\n    className: \"mr-2 !w-5 !h-5\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 7\n  }, this) : typeToIcon[type];\n  return {\n    key,\n    duration,\n    style,\n    className: `${className} px-4 py-3 text-gray-80 bg-gray-0 shadow-1 relative mb-4 animate-move-down`,\n    content: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center\",\n      children: [icon || IconComponent || null, /*#__PURE__*/_jsxDEV(\"span\", {\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this),\n    onClose: onClose,\n    onClick: onClick\n  };\n}\n\nfunction notice(args) {\n  const target = args.key || key++;\n  const closePromise = new Promise(resolve => {\n    const callback = () => {\n      if (typeof args.onClose === 'function') {\n        args.onClose();\n      }\n\n      return resolve(true);\n    };\n\n    getRCNotificationInstance(args, ({\n      instance\n    }) => {\n      instance.notice(getRCNoticeProps({ ...args,\n        key: target,\n        onClose: callback\n      }));\n    });\n  });\n\n  const result = () => {\n    if (messageInstance) {\n      messageInstance.removeNotice(target);\n    }\n  };\n\n  result.then = (filled, rejected) => closePromise.then(filled, rejected);\n\n  result.promise = closePromise;\n  return result;\n}\n\nconst api = {\n  open: notice,\n  config: setMessageConfig,\n\n  destroy(messageKey) {\n    if (messageInstance) {\n      if (messageKey) {\n        const {\n          removeNotice\n        } = messageInstance;\n        removeNotice(messageKey);\n      } else {\n        const {\n          destroy\n        } = messageInstance;\n        destroy();\n        messageInstance = null;\n      }\n    }\n  }\n\n};\nIconTypes.forEach(type => {\n  api[type] = args => api.open({ ...args,\n    type\n  });\n});\nexport default api;","map":{"version":3,"sources":["/Users/alice/Documents/rigel/src/components/Message/index.js"],"names":["Notification","Loading","ErrorFilled","SuccessFilled","WarningFilled","InfoFilled","IconTypes","messageInstance","defaultDuration","defaultTop","key","defaultTransitionName","defaultGetContainer","defaultMaxCount","getKeyThenIncreaseKey","setMessageConfig","options","top","undefined","duration","getContainer","transitionName","maxCount","getRCNotificationInstance","args","callback","prefixCls","instance","instanceConfig","style","className","newInstance","typeToIcon","success","info","error","warning","getRCNoticeProps","durationArg","type","content","onClose","onClick","icon","IconComponent","notice","target","closePromise","Promise","resolve","result","removeNotice","then","filled","rejected","promise","api","open","config","destroy","messageKey","forEach"],"mappings":"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","sourcesContent":["import Notification from 'rc-notification'\nimport {Loading} from '../../components'\nimport {\n  ErrorFilled,\n  SuccessFilled,\n  WarningFilled,\n  InfoFilled,\n} from '../../assets/svg'\n\nconst IconTypes = ['info', 'success', 'error', 'warning', 'loading']\n\nlet messageInstance\nlet defaultDuration = 3\nlet defaultTop = 20\nlet key = 1\nlet defaultTransitionName = 'animation-move-up'\nlet defaultGetContainer\nlet defaultMaxCount\n\nexport function getKeyThenIncreaseKey() {\n  return key++\n}\n\nfunction setMessageConfig(options) {\n  if (options.top !== undefined) {\n    defaultTop = options.top\n    // delete messageInstance for new defaultTop\n    messageInstance = null\n  }\n  if (options.duration !== undefined) {\n    defaultDuration = options.duration\n  }\n  if (options.getContainer !== undefined) {\n    defaultGetContainer = options.getContainer\n  }\n  if (options.transitionName !== undefined) {\n    defaultTransitionName = options.transitionName\n    // delete messageInstance for new transitionName\n    messageInstance = null\n  }\n  if (options.maxCount !== undefined) {\n    defaultMaxCount = options.maxCount\n    messageInstance = null\n  }\n}\n\nfunction getRCNotificationInstance(args, callback) {\n  const {\n    getContainer = defaultGetContainer,\n    transitionName = defaultTransitionName,\n    maxCount = defaultMaxCount,\n  } = args\n  const prefixCls = 'message'\n\n  if (messageInstance) {\n    callback({instance: messageInstance})\n    return\n  }\n\n  const instanceConfig = {\n    prefixCls,\n    transitionName,\n    style: {top: defaultTop},\n    getContainer,\n    maxCount,\n    className: 'absolute w-full flex justify-center',\n  }\n\n  Notification.newInstance(instanceConfig, instance => {\n    if (messageInstance) {\n      callback({instance})\n      return\n    }\n    messageInstance = instance\n\n    callback({instance})\n  })\n}\n\nconst typeToIcon = {\n  success: <SuccessFilled className=\"w-5 h-5 mr-2\" />,\n  info: <InfoFilled className=\"w-5 h-5 mr-2\" />,\n  error: <ErrorFilled className=\"w-5 h-5 mr-2\" />,\n  warning: <WarningFilled className=\"w-5 h-5 mr-2\" />,\n}\n\nfunction getRCNoticeProps(args) {\n  const {\n    duration: durationArg,\n    type,\n    key,\n    content,\n    style = {},\n    className = '',\n    onClose,\n    onClick,\n    icon,\n  } = args\n\n  const duration = durationArg === undefined ? defaultDuration : durationArg\n\n  const IconComponent =\n    type === 'loading' ? (\n      <Loading className=\"mr-2 !w-5 !h-5\" />\n    ) : (\n      typeToIcon[type]\n    )\n\n  return {\n    key,\n    duration,\n    style,\n    className: `${className} px-4 py-3 text-gray-80 bg-gray-0 shadow-1 relative mb-4 animate-move-down`,\n    content: (\n      <div className=\"flex items-center\">\n        {icon || IconComponent || null}\n        <span>{content}</span>\n      </div>\n    ),\n    onClose: onClose,\n    onClick: onClick,\n  }\n}\n\nfunction notice(args) {\n  const target = args.key || key++\n  const closePromise = new Promise(resolve => {\n    const callback = () => {\n      if (typeof args.onClose === 'function') {\n        args.onClose()\n      }\n      return resolve(true)\n    }\n\n    getRCNotificationInstance(args, ({instance}) => {\n      instance.notice(\n        getRCNoticeProps({...args, key: target, onClose: callback}),\n      )\n    })\n  })\n  const result = () => {\n    if (messageInstance) {\n      messageInstance.removeNotice(target)\n    }\n  }\n  result.then = (filled, rejected) => closePromise.then(filled, rejected)\n  result.promise = closePromise\n  return result\n}\n\nconst api = {\n  open: notice,\n  config: setMessageConfig,\n  destroy(messageKey) {\n    if (messageInstance) {\n      if (messageKey) {\n        const {removeNotice} = messageInstance\n        removeNotice(messageKey)\n      } else {\n        const {destroy} = messageInstance\n        destroy()\n        messageInstance = null\n      }\n    }\n  },\n}\n\nIconTypes.forEach(type => {\n  api[type] = args =>\n    api.open({\n      ...args,\n      type,\n    })\n})\n\nexport default api\n"]},"metadata":{},"sourceType":"module"}