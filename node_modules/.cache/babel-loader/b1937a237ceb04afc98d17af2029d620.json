{"ast":null,"code":"var _jsxFileName = \"/Users/alice/Documents/rigel/src/pages/components/AccountStatus/index.js\",\n    _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { SupportedChains } from '../../../constants/chainConfig';\nimport { useWallet, useAccountStatus } from '../../../hooks/useWallet';\nimport { Account, ConnectWallet, AccountError } from '../../components';\nimport { TypeAccountStatus } from '../../../constants';\nimport { getChainIdRight } from '../../../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AccountStatus({\n  chain,\n  size = 'medium',\n  className = '',\n  id\n}) {\n  _s();\n\n  const {\n    address,\n    error,\n    chainId,\n    type,\n    tryActivate\n  } = useWallet(chain);\n  const isChainIdRight = getChainIdRight(chain, chainId, address);\n  const {\n    type: accountType,\n    errorType\n  } = useAccountStatus(chain, address, error, isChainIdRight);\n  const accountCompStyle = useMemo(() => {\n    if (size === 'medium') return 'text-xs text-gray-80';\n    if (size === 'large') return 'text-sm text-gray-80';\n  }, [size]);\n  const iconStyle = useMemo(() => {\n    if (size === 'medium') return 'mr-1.5 !w-3 !h-3';\n    if (size === 'large') return 'mr-2 !w-4 !h-4';\n  }, [size]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${className}`,\n    children: [accountType === TypeAccountStatus.success && /*#__PURE__*/_jsxDEV(Account, {\n      id: `${id}_account`,\n      chain: chain,\n      showIcon: true,\n      className: accountCompStyle,\n      iconClassName: iconStyle,\n      address: address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), accountType === TypeAccountStatus.unconnected && /*#__PURE__*/_jsxDEV(ConnectWallet, {\n      id: `${id}_connectWallet`,\n      chain: chain,\n      size: size,\n      type: type,\n      tryActivate: tryActivate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this), accountType === TypeAccountStatus.error && /*#__PURE__*/_jsxDEV(AccountError, {\n      chain: chain,\n      errorType: errorType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AccountStatus, \"grc9MEqfRcggDRl1GRwGxRYtaTw=\", false, function () {\n  return [useWallet, useAccountStatus];\n});\n\n_c = AccountStatus;\nAccountStatus.propTypes = {\n  chain: PropTypes.oneOf(SupportedChains).isRequired,\n  size: PropTypes.oneOf(['medium', 'large']),\n  className: PropTypes.string,\n  id: PropTypes.string\n};\nexport default AccountStatus;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountStatus\");","map":{"version":3,"sources":["/Users/alice/Documents/rigel/src/pages/components/AccountStatus/index.js"],"names":["useMemo","PropTypes","SupportedChains","useWallet","useAccountStatus","Account","ConnectWallet","AccountError","TypeAccountStatus","getChainIdRight","AccountStatus","chain","size","className","id","address","error","chainId","type","tryActivate","isChainIdRight","accountType","errorType","accountCompStyle","iconStyle","success","unconnected","propTypes","oneOf","isRequired","string"],"mappings":"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","sourcesContent":["import {useMemo} from 'react'\nimport PropTypes from 'prop-types'\nimport {SupportedChains} from '../../../constants/chainConfig'\nimport {useWallet, useAccountStatus} from '../../../hooks/useWallet'\nimport {Account, ConnectWallet, AccountError} from '../../components'\nimport {TypeAccountStatus} from '../../../constants'\nimport {getChainIdRight} from '../../../utils'\n\nfunction AccountStatus({chain, size = 'medium', className = '', id}) {\n  const {address, error, chainId, type, tryActivate} = useWallet(chain)\n  const isChainIdRight = getChainIdRight(chain, chainId, address)\n  const {type: accountType, errorType} = useAccountStatus(\n    chain,\n    address,\n    error,\n    isChainIdRight,\n  )\n  const accountCompStyle = useMemo(() => {\n    if (size === 'medium') return 'text-xs text-gray-80'\n    if (size === 'large') return 'text-sm text-gray-80'\n  }, [size])\n\n  const iconStyle = useMemo(() => {\n    if (size === 'medium') return 'mr-1.5 !w-3 !h-3'\n    if (size === 'large') return 'mr-2 !w-4 !h-4'\n  }, [size])\n\n  return (\n    <div className={`${className}`}>\n      {accountType === TypeAccountStatus.success && (\n        <Account\n          id={`${id}_account`}\n          chain={chain}\n          showIcon={true}\n          className={accountCompStyle}\n          iconClassName={iconStyle}\n          address={address}\n        />\n      )}\n      {accountType === TypeAccountStatus.unconnected && (\n        <ConnectWallet\n          id={`${id}_connectWallet`}\n          chain={chain}\n          size={size}\n          type={type}\n          tryActivate={tryActivate}\n        />\n      )}\n      {accountType === TypeAccountStatus.error && (\n        <AccountError chain={chain} errorType={errorType} />\n      )}\n    </div>\n  )\n}\n\nAccountStatus.propTypes = {\n  chain: PropTypes.oneOf(SupportedChains).isRequired,\n  size: PropTypes.oneOf(['medium', 'large']),\n  className: PropTypes.string,\n  id: PropTypes.string,\n}\nexport default AccountStatus\n"]},"metadata":{},"sourceType":"module"}