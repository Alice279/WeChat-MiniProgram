{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useMemo } from 'react';\nimport { UnsupportedChainIdError } from '@web3-react/core';\nimport { ChainConfig, KeyOfMetaMask, KeyOfPortal } from '../constants/chainConfig';\nimport { useConnect as useConnectPortal, useBalance as useBalancePortal } from './usePortal';\nimport { useConnect as useConnectWeb3, useBalance as useBalanceWeb3 } from './useWeb3Network';\nimport { BigNumZero, TypeAccountStatus } from '../constants';\nexport function useWallet(chain) {\n  _s();\n\n  var _ChainConfig$chain;\n\n  const connectObjPortal = useConnectPortal();\n  const connectObjWeb3 = useConnectWeb3();\n  let data = {};\n\n  switch ((_ChainConfig$chain = ChainConfig[chain]) === null || _ChainConfig$chain === void 0 ? void 0 : _ChainConfig$chain.wallet) {\n    case KeyOfMetaMask:\n      data = connectObjWeb3;\n      break;\n\n    case KeyOfPortal:\n      data = connectObjPortal;\n      break;\n  }\n\n  return data;\n}\n/**\n * get balance of native token(for example:eth) or token balance(for example:usdt)\n * @param {*} chain\n * @param {*} address\n * @param {*} tokenAddress\n * @param {*} params\n * @returns\n */\n\n_s(useWallet, \"ymV4VCAiwYhIErktHGgEIS4lH/0=\", false, function () {\n  return [useConnectPortal, useConnectWeb3];\n});\n\nexport function useBalance(chain, address, tokenAddress) {\n  _s2();\n\n  var _ChainConfig$chain2;\n\n  const balancePortal = useBalancePortal(address, tokenAddress);\n  const balanceWeb3 = useBalanceWeb3(address, tokenAddress);\n  if (!chain || !address) return BigNumZero;\n\n  switch ((_ChainConfig$chain2 = ChainConfig[chain]) === null || _ChainConfig$chain2 === void 0 ? void 0 : _ChainConfig$chain2.wallet) {\n    case KeyOfMetaMask:\n      return balanceWeb3;\n\n    case KeyOfPortal:\n      return balancePortal;\n\n    default:\n      return BigNumZero;\n  }\n}\n/**\n * whether this address is native token in this chain\n * @param {*} chain\n * @param {*} address\n * @returns\n */\n\n_s2(useBalance, \"hUIYqNiL6AyuwqKbhsrfcVVFXHA=\", false, function () {\n  return [useBalancePortal, useBalanceWeb3];\n});\n\nexport function useIsNativeToken(chain, tokenAddress) {\n  _s3();\n\n  return useMemo(() => {\n    var _ChainConfig$chain$to;\n\n    return ((_ChainConfig$chain$to = ChainConfig[chain].tokenName) === null || _ChainConfig$chain$to === void 0 ? void 0 : _ChainConfig$chain$to.toLowerCase()) === tokenAddress;\n  }, [chain, tokenAddress]);\n}\n\n_s3(useIsNativeToken, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\n\nexport function useAccountStatus(chain, address, error, isChainIdRight) {\n  _s4();\n\n  return useMemo(() => {\n    var _ChainConfig$chain3;\n\n    const wallet = (_ChainConfig$chain3 = ChainConfig[chain]) === null || _ChainConfig$chain3 === void 0 ? void 0 : _ChainConfig$chain3.wallet;\n\n    if (wallet) {\n      if (address) {\n        if (isChainIdRight) {\n          return {\n            type: TypeAccountStatus.success\n          };\n        } //error:wrong network\n\n\n        return {\n          type: TypeAccountStatus.error,\n          errorType: 2\n        };\n      } else {\n        if (error) {\n          if (error instanceof UnsupportedChainIdError) {\n            //error:wrong network\n            return {\n              type: TypeAccountStatus.error,\n              errorType: 2\n            };\n          } //other error\n\n\n          return {\n            type: TypeAccountStatus.error,\n            errorType: 1\n          };\n        }\n\n        return {\n          type: TypeAccountStatus.unconnected\n        };\n      }\n    } else {\n      //it means that this chain do not require the wallet, for example: btc\n      return {\n        type: TypeAccountStatus.success\n      };\n    }\n  }, [Boolean(address), chain, Boolean(error), isChainIdRight]);\n}\n\n_s4(useAccountStatus, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");","map":{"version":3,"sources":["/Users/alice/Documents/rigel/src/hooks/useWallet.js"],"names":["useMemo","UnsupportedChainIdError","ChainConfig","KeyOfMetaMask","KeyOfPortal","useConnect","useConnectPortal","useBalance","useBalancePortal","useConnectWeb3","useBalanceWeb3","BigNumZero","TypeAccountStatus","useWallet","chain","connectObjPortal","connectObjWeb3","data","wallet","address","tokenAddress","balancePortal","balanceWeb3","useIsNativeToken","tokenName","toLowerCase","useAccountStatus","error","isChainIdRight","type","success","errorType","unconnected","Boolean"],"mappings":";;;;;AAAA;AACA,SAAQA,OAAR,QAAsB,OAAtB;AACA,SAAQC,uBAAR,QAAsC,kBAAtC;AACA,SAAQC,WAAR,EAAqBC,aAArB,EAAoCC,WAApC,QAAsD,0BAAtD;AACA,SACEC,UAAU,IAAIC,gBADhB,EAEEC,UAAU,IAAIC,gBAFhB,QAGO,aAHP;AAIA,SACEH,UAAU,IAAII,cADhB,EAEEF,UAAU,IAAIG,cAFhB,QAGO,kBAHP;AAIA,SAAQC,UAAR,EAAoBC,iBAApB,QAA4C,cAA5C;AAEA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AAAA;;AAC/B,QAAMC,gBAAgB,GAAGT,gBAAgB,EAAzC;AACA,QAAMU,cAAc,GAAGP,cAAc,EAArC;AACA,MAAIQ,IAAI,GAAG,EAAX;;AACA,gCAAQf,WAAW,CAACY,KAAD,CAAnB,uDAAQ,mBAAoBI,MAA5B;AACE,SAAKf,aAAL;AACEc,MAAAA,IAAI,GAAGD,cAAP;AACA;;AACF,SAAKZ,WAAL;AACEa,MAAAA,IAAI,GAAGF,gBAAP;AACA;AANJ;;AAQA,SAAOE,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAtBgBJ,S;UACWP,gB,EACFG,c;;;AAqBzB,OAAO,SAASF,UAAT,CAAoBO,KAApB,EAA2BK,OAA3B,EAAoCC,YAApC,EAAkD;AAAA;;AAAA;;AACvD,QAAMC,aAAa,GAAGb,gBAAgB,CAACW,OAAD,EAAUC,YAAV,CAAtC;AACA,QAAME,WAAW,GAAGZ,cAAc,CAACS,OAAD,EAAUC,YAAV,CAAlC;AACA,MAAI,CAACN,KAAD,IAAU,CAACK,OAAf,EAAwB,OAAOR,UAAP;;AACxB,iCAAQT,WAAW,CAACY,KAAD,CAAnB,wDAAQ,oBAAoBI,MAA5B;AACE,SAAKf,aAAL;AACE,aAAOmB,WAAP;;AACF,SAAKlB,WAAL;AACE,aAAOiB,aAAP;;AACF;AACE,aAAOV,UAAP;AANJ;AAQD;AAED;AACA;AACA;AACA;AACA;AACA;;IAnBgBJ,U;UACQC,gB,EACFE,c;;;AAkBtB,OAAO,SAASa,gBAAT,CAA0BT,KAA1B,EAAiCM,YAAjC,EAA+C;AAAA;;AACpD,SAAOpB,OAAO,CACZ;AAAA;;AAAA,WAAM,0BAAAE,WAAW,CAACY,KAAD,CAAX,CAAmBU,SAAnB,gFAA8BC,WAA9B,QAAgDL,YAAtD;AAAA,GADY,EAEZ,CAACN,KAAD,EAAQM,YAAR,CAFY,CAAd;AAID;;IALeG,gB;;AAOhB,OAAO,SAASG,gBAAT,CAA0BZ,KAA1B,EAAiCK,OAAjC,EAA0CQ,KAA1C,EAAiDC,cAAjD,EAAiE;AAAA;;AACtE,SAAO5B,OAAO,CAAC,MAAM;AAAA;;AACnB,UAAMkB,MAAM,0BAAGhB,WAAW,CAACY,KAAD,CAAd,wDAAG,oBAAoBI,MAAnC;;AACA,QAAIA,MAAJ,EAAY;AACV,UAAIC,OAAJ,EAAa;AACX,YAAIS,cAAJ,EAAoB;AAClB,iBAAO;AAACC,YAAAA,IAAI,EAAEjB,iBAAiB,CAACkB;AAAzB,WAAP;AACD,SAHU,CAIX;;;AACA,eAAO;AAACD,UAAAA,IAAI,EAAEjB,iBAAiB,CAACe,KAAzB;AAAgCI,UAAAA,SAAS,EAAE;AAA3C,SAAP;AACD,OAND,MAMO;AACL,YAAIJ,KAAJ,EAAW;AACT,cAAIA,KAAK,YAAY1B,uBAArB,EAA8C;AAC5C;AACA,mBAAO;AAAC4B,cAAAA,IAAI,EAAEjB,iBAAiB,CAACe,KAAzB;AAAgCI,cAAAA,SAAS,EAAE;AAA3C,aAAP;AACD,WAJQ,CAKT;;;AACA,iBAAO;AAACF,YAAAA,IAAI,EAAEjB,iBAAiB,CAACe,KAAzB;AAAgCI,YAAAA,SAAS,EAAE;AAA3C,WAAP;AACD;;AACD,eAAO;AAACF,UAAAA,IAAI,EAAEjB,iBAAiB,CAACoB;AAAzB,SAAP;AACD;AACF,KAlBD,MAkBO;AACL;AACA,aAAO;AAACH,QAAAA,IAAI,EAAEjB,iBAAiB,CAACkB;AAAzB,OAAP;AACD;AACF,GAxBa,EAwBX,CAACG,OAAO,CAACd,OAAD,CAAR,EAAmBL,KAAnB,EAA0BmB,OAAO,CAACN,KAAD,CAAjC,EAA0CC,cAA1C,CAxBW,CAAd;AAyBD;;IA1BeF,gB","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport {useMemo} from 'react'\nimport {UnsupportedChainIdError} from '@web3-react/core'\nimport {ChainConfig, KeyOfMetaMask, KeyOfPortal} from '../constants/chainConfig'\nimport {\n  useConnect as useConnectPortal,\n  useBalance as useBalancePortal,\n} from './usePortal'\nimport {\n  useConnect as useConnectWeb3,\n  useBalance as useBalanceWeb3,\n} from './useWeb3Network'\nimport {BigNumZero, TypeAccountStatus} from '../constants'\n\nexport function useWallet(chain) {\n  const connectObjPortal = useConnectPortal()\n  const connectObjWeb3 = useConnectWeb3()\n  let data = {}\n  switch (ChainConfig[chain]?.wallet) {\n    case KeyOfMetaMask:\n      data = connectObjWeb3\n      break\n    case KeyOfPortal:\n      data = connectObjPortal\n      break\n  }\n  return data\n}\n\n/**\n * get balance of native token(for example:eth) or token balance(for example:usdt)\n * @param {*} chain\n * @param {*} address\n * @param {*} tokenAddress\n * @param {*} params\n * @returns\n */\nexport function useBalance(chain, address, tokenAddress) {\n  const balancePortal = useBalancePortal(address, tokenAddress)\n  const balanceWeb3 = useBalanceWeb3(address, tokenAddress)\n  if (!chain || !address) return BigNumZero\n  switch (ChainConfig[chain]?.wallet) {\n    case KeyOfMetaMask:\n      return balanceWeb3\n    case KeyOfPortal:\n      return balancePortal\n    default:\n      return BigNumZero\n  }\n}\n\n/**\n * whether this address is native token in this chain\n * @param {*} chain\n * @param {*} address\n * @returns\n */\nexport function useIsNativeToken(chain, tokenAddress) {\n  return useMemo(\n    () => ChainConfig[chain].tokenName?.toLowerCase() === tokenAddress,\n    [chain, tokenAddress],\n  )\n}\n\nexport function useAccountStatus(chain, address, error, isChainIdRight) {\n  return useMemo(() => {\n    const wallet = ChainConfig[chain]?.wallet\n    if (wallet) {\n      if (address) {\n        if (isChainIdRight) {\n          return {type: TypeAccountStatus.success}\n        }\n        //error:wrong network\n        return {type: TypeAccountStatus.error, errorType: 2}\n      } else {\n        if (error) {\n          if (error instanceof UnsupportedChainIdError) {\n            //error:wrong network\n            return {type: TypeAccountStatus.error, errorType: 2}\n          }\n          //other error\n          return {type: TypeAccountStatus.error, errorType: 1}\n        }\n        return {type: TypeAccountStatus.unconnected}\n      }\n    } else {\n      //it means that this chain do not require the wallet, for example: btc\n      return {type: TypeAccountStatus.success}\n    }\n  }, [Boolean(address), chain, Boolean(error), isChainIdRight])\n}\n"]},"metadata":{},"sourceType":"module"}