{"ast":null,"code":"// This was ported from https://github.com/MaiaVictor/eth-lib, with some minor\n// modifications to use ESM module and replace bn.js with big.js. It is licensed\n// under MIT:\n//\n// Copyright 2017 Victor Maia\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nimport BN from 'bn.js';\nimport * as Bytes from '@cfxjs/bytes';\n\nconst fromBN = bn => '0x' + bn.toString('hex');\n\nconst toBN = str => new BN(str.slice(2), 16);\n\nconst fromString = str => {\n  const bn = '0x' + (str.slice(0, 2) === '0x' ? new BN(str.slice(2), 16) : new BN(str, 10)).toString('hex');\n  return bn === '0x0' ? '0x' : bn;\n};\n\nconst toEther = wei => toNumber(div(wei, fromString('10000000000'))) / 100000000;\n\nconst fromEther = eth => mul(fromNumber(Math.floor(eth * 100000000)), fromString('10000000000'));\n\nconst toString = a => toBN(a).toString(10);\n\nconst fromNumber = a => typeof a === 'string' ? /^0x/.test(a) ? a : '0x' + a : '0x' + new BN(a).toString('hex');\n\nconst toNumber = a => toBN(a).toNumber();\n\nconst toUint256 = a => Bytes.pad(32, a);\n\nconst bin = method => (a, b) => fromBN(toBN(a)[method](toBN(b)));\n\nconst add = bin('add');\nconst mul = bin('mul');\nconst div = bin('div');\nconst sub = bin('sub');\nexport { toString, fromString, toNumber, fromNumber, toEther, fromEther, toUint256, add, mul, div, sub };","map":{"version":3,"sources":["/Users/alice/Documents/rigel/node_modules/@cfxjs/nat/index.js"],"names":["BN","Bytes","fromBN","bn","toString","toBN","str","slice","fromString","toEther","wei","toNumber","div","fromEther","eth","mul","fromNumber","Math","floor","a","test","toUint256","pad","bin","method","b","add","sub"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,EAAP,MAAe,OAAf;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;;AAEA,MAAMC,MAAM,GAAGC,EAAE,IAAI,OAAOA,EAAE,CAACC,QAAH,CAAY,KAAZ,CAA5B;;AAEA,MAAMC,IAAI,GAAGC,GAAG,IAAI,IAAIN,EAAJ,CAAOM,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAP,EAAqB,EAArB,CAApB;;AAEA,MAAMC,UAAU,GAAGF,GAAG,IAAI;AACxB,QAAMH,EAAE,GACN,OACA,CAACG,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAa,CAAb,MAAoB,IAApB,GACG,IAAIP,EAAJ,CAAOM,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAP,EAAqB,EAArB,CADH,GAEG,IAAIP,EAAJ,CAAOM,GAAP,EAAY,EAAZ,CAFJ,EAGEF,QAHF,CAGW,KAHX,CAFF;AAMA,SAAOD,EAAE,KAAK,KAAP,GAAe,IAAf,GAAsBA,EAA7B;AACD,CARD;;AAUA,MAAMM,OAAO,GAAGC,GAAG,IAAIC,QAAQ,CAACC,GAAG,CAACF,GAAD,EAAMF,UAAU,CAAC,aAAD,CAAhB,CAAJ,CAAR,GAAgD,SAAvE;;AAEA,MAAMK,SAAS,GAAGC,GAAG,IACnBC,GAAG,CAACC,UAAU,CAACC,IAAI,CAACC,KAAL,CAAWJ,GAAG,GAAG,SAAjB,CAAD,CAAX,EAA0CN,UAAU,CAAC,aAAD,CAApD,CADL;;AAGA,MAAMJ,QAAQ,GAAGe,CAAC,IAAId,IAAI,CAACc,CAAD,CAAJ,CAAQf,QAAR,CAAiB,EAAjB,CAAtB;;AAEA,MAAMY,UAAU,GAAGG,CAAC,IAClB,OAAOA,CAAP,KAAa,QAAb,GACI,MAAMC,IAAN,CAAWD,CAAX,IACEA,CADF,GAEE,OAAOA,CAHb,GAII,OAAO,IAAInB,EAAJ,CAAOmB,CAAP,EAAUf,QAAV,CAAmB,KAAnB,CALb;;AAOA,MAAMO,QAAQ,GAAGQ,CAAC,IAAId,IAAI,CAACc,CAAD,CAAJ,CAAQR,QAAR,EAAtB;;AAEA,MAAMU,SAAS,GAAGF,CAAC,IAAIlB,KAAK,CAACqB,GAAN,CAAU,EAAV,EAAcH,CAAd,CAAvB;;AAEA,MAAMI,GAAG,GAAGC,MAAM,IAAI,CAACL,CAAD,EAAIM,CAAJ,KAAUvB,MAAM,CAACG,IAAI,CAACc,CAAD,CAAJ,CAAQK,MAAR,EAAgBnB,IAAI,CAACoB,CAAD,CAApB,CAAD,CAAtC;;AAEA,MAAMC,GAAG,GAAGH,GAAG,CAAC,KAAD,CAAf;AACA,MAAMR,GAAG,GAAGQ,GAAG,CAAC,KAAD,CAAf;AACA,MAAMX,GAAG,GAAGW,GAAG,CAAC,KAAD,CAAf;AACA,MAAMI,GAAG,GAAGJ,GAAG,CAAC,KAAD,CAAf;AAEA,SACEnB,QADF,EAEEI,UAFF,EAGEG,QAHF,EAIEK,UAJF,EAKEP,OALF,EAMEI,SANF,EAOEQ,SAPF,EAQEK,GARF,EASEX,GATF,EAUEH,GAVF,EAWEe,GAXF","sourcesContent":["// This was ported from https://github.com/MaiaVictor/eth-lib, with some minor\n// modifications to use ESM module and replace bn.js with big.js. It is licensed\n// under MIT:\n//\n// Copyright 2017 Victor Maia\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport BN from 'bn.js'\nimport * as Bytes from '@cfxjs/bytes'\n\nconst fromBN = bn => '0x' + bn.toString('hex')\n\nconst toBN = str => new BN(str.slice(2), 16)\n\nconst fromString = str => {\n  const bn =\n    '0x' +\n    (str.slice(0, 2) === '0x'\n      ? new BN(str.slice(2), 16)\n      : new BN(str, 10)\n    ).toString('hex')\n  return bn === '0x0' ? '0x' : bn\n}\n\nconst toEther = wei => toNumber(div(wei, fromString('10000000000'))) / 100000000\n\nconst fromEther = eth =>\n  mul(fromNumber(Math.floor(eth * 100000000)), fromString('10000000000'))\n\nconst toString = a => toBN(a).toString(10)\n\nconst fromNumber = a =>\n  typeof a === 'string'\n    ? /^0x/.test(a)\n      ? a\n      : '0x' + a\n    : '0x' + new BN(a).toString('hex')\n\nconst toNumber = a => toBN(a).toNumber()\n\nconst toUint256 = a => Bytes.pad(32, a)\n\nconst bin = method => (a, b) => fromBN(toBN(a)[method](toBN(b)))\n\nconst add = bin('add')\nconst mul = bin('mul')\nconst div = bin('div')\nconst sub = bin('sub')\n\nexport {\n  toString,\n  fromString,\n  toNumber,\n  fromNumber,\n  toEther,\n  fromEther,\n  toUint256,\n  add,\n  mul,\n  div,\n  sub,\n}\n"]},"metadata":{},"sourceType":"module"}