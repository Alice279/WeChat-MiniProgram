{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { useWindowSize } from 'react-use';\nimport { useMemo } from 'react';\nimport { KeyOfCfx, KeyOfBtc, KeyOfEth } from '../constants/chainConfig';\nimport { MobileBreakpoint } from '../constants';\nimport { useWallet } from '../hooks/useWallet';\nexport function useIsCfxChain(chain) {\n  _s();\n\n  const isCfxChain = useMemo(() => chain === KeyOfCfx, [chain]);\n  return isCfxChain;\n}\n\n_s(useIsCfxChain, \"toQYb5M0cQU5A02VeqSzLzr3sWY=\");\n\nexport function useIsBtcChain(chain) {\n  _s2();\n\n  const isBtcChain = useMemo(() => chain === KeyOfBtc, [chain]);\n  return isBtcChain;\n}\n\n_s2(useIsBtcChain, \"OUiUTPh8U4xF77zANpPtOFiymIc=\");\n\nexport function useIsMobile() {\n  _s3();\n\n  const {\n    width\n  } = useWindowSize();\n  if (width < MobileBreakpoint) return true;\n  return false;\n}\n\n_s3(useIsMobile, \"8LukUfUM8Ty1wslQ6x6/RK5CFpc=\", false, function () {\n  return [useWindowSize];\n});\n\nexport function useConnectData() {\n  _s4();\n\n  const {\n    address: cfxAddress\n  } = useWallet(KeyOfCfx);\n  const {\n    address: ethAddress\n  } = useWallet(KeyOfEth);\n  const connectData = useMemo(() => [{\n    chain: KeyOfCfx,\n    address: cfxAddress\n  }, {\n    chain: KeyOfEth,\n    address: ethAddress\n  }], [cfxAddress, ethAddress]);\n  return connectData;\n}\n\n_s4(useConnectData, \"i4KYBP7MneR1Me53+YL7DmTcwic=\", false, function () {\n  return [useWallet, useWallet];\n});","map":{"version":3,"sources":["/Users/alice/Documents/rigel/src/hooks/index.js"],"names":["useWindowSize","useMemo","KeyOfCfx","KeyOfBtc","KeyOfEth","MobileBreakpoint","useWallet","useIsCfxChain","chain","isCfxChain","useIsBtcChain","isBtcChain","useIsMobile","width","useConnectData","address","cfxAddress","ethAddress","connectData"],"mappings":";;;;;AAAA,SAAQA,aAAR,QAA4B,WAA5B;AACA,SAAQC,OAAR,QAAsB,OAAtB;AACA,SAAQC,QAAR,EAAkBC,QAAlB,EAA4BC,QAA5B,QAA2C,0BAA3C;AACA,SAAQC,gBAAR,QAA+B,cAA/B;AACA,SAAQC,SAAR,QAAwB,oBAAxB;AAEA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AACnC,QAAMC,UAAU,GAAGR,OAAO,CAAC,MAAMO,KAAK,KAAKN,QAAjB,EAA2B,CAACM,KAAD,CAA3B,CAA1B;AACA,SAAOC,UAAP;AACD;;GAHeF,a;;AAKhB,OAAO,SAASG,aAAT,CAAuBF,KAAvB,EAA8B;AAAA;;AACnC,QAAMG,UAAU,GAAGV,OAAO,CAAC,MAAMO,KAAK,KAAKL,QAAjB,EAA2B,CAACK,KAAD,CAA3B,CAA1B;AACA,SAAOG,UAAP;AACD;;IAHeD,a;;AAKhB,OAAO,SAASE,WAAT,GAAuB;AAAA;;AAC5B,QAAM;AAACC,IAAAA;AAAD,MAAUb,aAAa,EAA7B;AACA,MAAIa,KAAK,GAAGR,gBAAZ,EAA8B,OAAO,IAAP;AAC9B,SAAO,KAAP;AACD;;IAJeO,W;UACEZ,a;;;AAKlB,OAAO,SAASc,cAAT,GAA0B;AAAA;;AAC/B,QAAM;AAACC,IAAAA,OAAO,EAAEC;AAAV,MAAwBV,SAAS,CAACJ,QAAD,CAAvC;AACA,QAAM;AAACa,IAAAA,OAAO,EAAEE;AAAV,MAAwBX,SAAS,CAACF,QAAD,CAAvC;AACA,QAAMc,WAAW,GAAGjB,OAAO,CACzB,MAAM,CACJ;AACEO,IAAAA,KAAK,EAAEN,QADT;AAEEa,IAAAA,OAAO,EAAEC;AAFX,GADI,EAKJ;AAACR,IAAAA,KAAK,EAAEJ,QAAR;AAAkBW,IAAAA,OAAO,EAAEE;AAA3B,GALI,CADmB,EAQzB,CAACD,UAAD,EAAaC,UAAb,CARyB,CAA3B;AAWA,SAAOC,WAAP;AACD;;IAfeJ,c;UACgBR,S,EACAA,S","sourcesContent":["import {useWindowSize} from 'react-use'\nimport {useMemo} from 'react'\nimport {KeyOfCfx, KeyOfBtc, KeyOfEth} from '../constants/chainConfig'\nimport {MobileBreakpoint} from '../constants'\nimport {useWallet} from '../hooks/useWallet'\n\nexport function useIsCfxChain(chain) {\n  const isCfxChain = useMemo(() => chain === KeyOfCfx, [chain])\n  return isCfxChain\n}\n\nexport function useIsBtcChain(chain) {\n  const isBtcChain = useMemo(() => chain === KeyOfBtc, [chain])\n  return isBtcChain\n}\n\nexport function useIsMobile() {\n  const {width} = useWindowSize()\n  if (width < MobileBreakpoint) return true\n  return false\n}\n\nexport function useConnectData() {\n  const {address: cfxAddress} = useWallet(KeyOfCfx)\n  const {address: ethAddress} = useWallet(KeyOfEth)\n  const connectData = useMemo(\n    () => [\n      {\n        chain: KeyOfCfx,\n        address: cfxAddress,\n      },\n      {chain: KeyOfEth, address: ethAddress},\n    ],\n    [cfxAddress, ethAddress],\n  )\n\n  return connectData\n}\n"]},"metadata":{},"sourceType":"module"}