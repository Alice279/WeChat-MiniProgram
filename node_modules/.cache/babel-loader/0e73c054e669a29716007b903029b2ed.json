{"ast":null,"code":"/* eslint-disable no-unused-vars */\nimport Big from 'big.js';\nBig.RM = 0;\nBig.NE = -19;\nexport const CFX_DECIMAL = 18;\nexport const BTC_DECIMAL = 6;\nexport const USDT_DECIMAL = 8;\nexport const COMMOM_DECIMAL = 18;\nexport const convertDecimal = (numOrStr, action = 'divide', decimal = COMMOM_DECIMAL) => {\n  if (action === 'divide') {\n    return new Big(numOrStr).div(`1e${decimal}`).toString(10);\n  } else if (action === 'multiply') {\n    return new Big(numOrStr).times(`1e${decimal}`).toString(10);\n  }\n\n  return numOrStr;\n};\nexport const fromCfxToDrip = numOrStr => {\n  return new Big(numOrStr).times(1e18).toString(10);\n};\nexport const trimZero = numOrStr => {\n  return new Big(numOrStr).toString(10);\n};\nexport const formatDigit = (numOrStr, digit) => {\n  const str = trimZero(numOrStr);\n  const strArr = str.split('.'); // no digit\n\n  if (!digit) return numOrStr; // no decimal or digit < integer length\n  else if (!strArr[1] || strArr[0].length >= digit) return toThousands(strArr[0]);else if (strArr[0].length + strArr[1].length <= digit) return toThousands(str);else {\n      const decimal = strArr[1].substring(0, digit - strArr[0].length);\n      return toThousands(trimZero([strArr[0], decimal].join('.')));\n    }\n};\nexport const toThousands = (numOrStr, delimiter = ',', prevDelimiter = ',') => {\n  let str = trimZero(numOrStr);\n  return str.replace(new RegExp(prevDelimiter, 'igm'), '').split('.').reduce((acc, cur, index) => {\n    if (index) {\n      return `${acc}.${cur}`;\n    } else {\n      return cur.replace(/(\\d{1,3})(?=(\\d{3})+(?:$|\\.))/g, `$1${delimiter}`);\n    }\n  }, '');\n};\nexport const formatAmount = numOrStr => {\n  const str = trimZero(numOrStr);\n  const bNum = new Big(numOrStr);\n\n  if (bNum.gte(Big(0)) && bNum.lt(Big(1e6))) {\n    return formatDigit(str, 7);\n  } else if (bNum.gte(Big(1e6)) && bNum.lt(Big(1e9))) {\n    return toThousands(bNum.div(1e6).round(3).toString(10)) + ' M';\n  } else if (bNum.gte(Big(1e9)) && bNum.lt(Big(1e12))) {\n    return toThousands(bNum.div(1e9).round(3).toString(10)) + ' G';\n  } else if (bNum.gte(Big(1e12)) && bNum.lt(Big(1e15))) {\n    return toThousands(bNum.div(1e12).round(3).toString(10)) + ' T';\n  } else if (bNum.gte(Big(1e15))) {\n    return toThousands(bNum.div(1e12).round().toString(10)) + ' T';\n  }\n}; // only shorten the conflux address not containing networkid to have cfx:/cfxtest: + 4 characters at start and end\n\nexport const shortenAddress = address => {\n  if (!address || typeof address !== 'string') return address;\n  const arr = address.split(':');\n  if (arr.length !== 2) return address;\n  const length = arr[1].length;\n  if (length !== 42) return address;\n  return `${arr[0]}:${arr[1].substring(0, 4)}...${arr[1].substring(length - 4)}`;\n};\nexport default Big;","map":{"version":3,"sources":["/Users/alice/Documents/rigel/node_modules/@cfxjs/data-format/index.js"],"names":["Big","RM","NE","CFX_DECIMAL","BTC_DECIMAL","USDT_DECIMAL","COMMOM_DECIMAL","convertDecimal","numOrStr","action","decimal","div","toString","times","fromCfxToDrip","trimZero","formatDigit","digit","str","strArr","split","length","toThousands","substring","join","delimiter","prevDelimiter","replace","RegExp","reduce","acc","cur","index","formatAmount","bNum","gte","lt","round","shortenAddress","address","arr"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport Big from 'big.js'\nBig.RM = 0\nBig.NE = -19\n\nexport const CFX_DECIMAL = 18\nexport const BTC_DECIMAL = 6\nexport const USDT_DECIMAL = 8\nexport const COMMOM_DECIMAL = 18\n\nexport const convertDecimal = (\n  numOrStr,\n  action = 'divide',\n  decimal = COMMOM_DECIMAL,\n) => {\n  if (action === 'divide') {\n    return new Big(numOrStr).div(`1e${decimal}`).toString(10)\n  } else if (action === 'multiply') {\n    return new Big(numOrStr).times(`1e${decimal}`).toString(10)\n  }\n  return numOrStr\n}\n\nexport const fromCfxToDrip = numOrStr => {\n  return new Big(numOrStr).times(1e18).toString(10)\n}\n\nexport const trimZero = numOrStr => {\n  return new Big(numOrStr).toString(10)\n}\n\nexport const formatDigit = (numOrStr, digit) => {\n  const str = trimZero(numOrStr)\n  const strArr = str.split('.')\n  // no digit\n  if (!digit) return numOrStr\n  // no decimal or digit < integer length\n  else if (!strArr[1] || strArr[0].length >= digit)\n    return toThousands(strArr[0])\n  else if (strArr[0].length + strArr[1].length <= digit) return toThousands(str)\n  else {\n    const decimal = strArr[1].substring(0, digit - strArr[0].length)\n    return toThousands(trimZero([strArr[0], decimal].join('.')))\n  }\n}\n\nexport const toThousands = (numOrStr, delimiter = ',', prevDelimiter = ',') => {\n  let str = trimZero(numOrStr)\n  return str\n    .replace(new RegExp(prevDelimiter, 'igm'), '')\n    .split('.')\n    .reduce((acc, cur, index) => {\n      if (index) {\n        return `${acc}.${cur}`\n      } else {\n        return cur.replace(/(\\d{1,3})(?=(\\d{3})+(?:$|\\.))/g, `$1${delimiter}`)\n      }\n    }, '')\n}\n\nexport const formatAmount = numOrStr => {\n  const str = trimZero(numOrStr)\n  const bNum = new Big(numOrStr)\n  if (bNum.gte(Big(0)) && bNum.lt(Big(1e6))) {\n    return formatDigit(str, 7)\n  } else if (bNum.gte(Big(1e6)) && bNum.lt(Big(1e9))) {\n    return toThousands(bNum.div(1e6).round(3).toString(10)) + ' M'\n  } else if (bNum.gte(Big(1e9)) && bNum.lt(Big(1e12))) {\n    return toThousands(bNum.div(1e9).round(3).toString(10)) + ' G'\n  } else if (bNum.gte(Big(1e12)) && bNum.lt(Big(1e15))) {\n    return toThousands(bNum.div(1e12).round(3).toString(10)) + ' T'\n  } else if (bNum.gte(Big(1e15))) {\n    return toThousands(bNum.div(1e12).round().toString(10)) + ' T'\n  }\n}\n\n// only shorten the conflux address not containing networkid to have cfx:/cfxtest: + 4 characters at start and end\nexport const shortenAddress = address => {\n  if (!address || typeof address !== 'string') return address\n  const arr = address.split(':')\n  if (arr.length !== 2) return address\n  const length = arr[1].length\n  if (length !== 42) return address\n\n  return `${arr[0]}:${arr[1].substring(0, 4)}...${arr[1].substring(length - 4)}`\n}\n\nexport default Big\n"]},"metadata":{},"sourceType":"module"}