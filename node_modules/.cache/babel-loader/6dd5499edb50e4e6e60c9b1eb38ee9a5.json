{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core'; // import { injected } from '../../../utils/web3s'\n\nimport { useEagerConnect, useInactiveListener } from '../../../hooks/useWeb3Network';\nimport { NetworkContextName } from '../../../constants';\nimport { network } from '../../../utils/web3';\nexport default function Web3ReactManager({\n  children\n}) {\n  _s();\n\n  const {\n    active\n  } = useWeb3React();\n  const {\n    active: networkActive,\n    error: networkError,\n    activate: activateNetwork\n  } = useWeb3React(NetworkContextName); // try to eagerly connect to an injected provider, if it exists and has granted access already\n\n  const triedEager = useEagerConnect(); // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network);\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active]); // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n\n  useInactiveListener(!triedEager); // handle delayed loader state\n  //   const [showLoader, setShowLoader] = useState(false)\n  //   useEffect(() => {\n  //     const timeout = setTimeout(() => {\n  //       setShowLoader(true)\n  //     }, 600)\n  //     return () => {\n  //       clearTimeout(timeout)\n  //     }\n  //   }, [])\n  // on page load, do nothing until we've tried to connect to the injected connector\n\n  if (!triedEager) {\n    return null;\n  } // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  //TODO:\n\n\n  if (!active && networkError) {\n    return null;\n  } // if neither context is active, spin\n  //TODO:\n\n\n  if (!active && !networkActive) {\n    return null;\n  }\n\n  return children;\n}\n\n_s(Web3ReactManager, \"wsDedv2SEwsuCuVQ5js/Cuu54hU=\", false, function () {\n  return [useWeb3React, useWeb3React, useEagerConnect, useInactiveListener];\n});\n\n_c = Web3ReactManager;\n\nvar _c;\n\n$RefreshReg$(_c, \"Web3ReactManager\");","map":{"version":3,"sources":["/Users/alice/Documents/rigel/src/pages/components/Web3ReactManager/index.js"],"names":["useEffect","useWeb3React","useEagerConnect","useInactiveListener","NetworkContextName","network","Web3ReactManager","children","active","networkActive","error","networkError","activate","activateNetwork","triedEager"],"mappings":";;AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,SAAQC,YAAR,QAA2B,kBAA3B,C,CAEA;;AACA,SACEC,eADF,EAEEC,mBAFF,QAGO,+BAHP;AAIA,SAAQC,kBAAR,QAAiC,oBAAjC;AACA,SAAQC,OAAR,QAAsB,qBAAtB;AAEA,eAAe,SAASC,gBAAT,CAA0B;AAACC,EAAAA;AAAD,CAA1B,EAAsC;AAAA;;AACnD,QAAM;AAACC,IAAAA;AAAD,MAAWP,YAAY,EAA7B;AACA,QAAM;AACJO,IAAAA,MAAM,EAAEC,aADJ;AAEJC,IAAAA,KAAK,EAAEC,YAFH;AAGJC,IAAAA,QAAQ,EAAEC;AAHN,MAIFZ,YAAY,CAACG,kBAAD,CAJhB,CAFmD,CAQnD;;AACA,QAAMU,UAAU,GAAGZ,eAAe,EAAlC,CATmD,CAWnD;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,UAAU,IAAI,CAACL,aAAf,IAAgC,CAACE,YAAjC,IAAiD,CAACH,MAAtD,EAA8D;AAC5DK,MAAAA,eAAe,CAACR,OAAD,CAAf;AACD;AACF,GAJQ,EAIN,CAACS,UAAD,EAAaL,aAAb,EAA4BE,YAA5B,EAA0CE,eAA1C,EAA2DL,MAA3D,CAJM,CAAT,CAZmD,CAkBnD;;AACAL,EAAAA,mBAAmB,CAAC,CAACW,UAAF,CAAnB,CAnBmD,CAqBnD;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACA,MAAI,CAACA,UAAL,EAAiB;AACf,WAAO,IAAP;AACD,GApCkD,CAsCnD;AACA;;;AACA,MAAI,CAACN,MAAD,IAAWG,YAAf,EAA6B;AAC3B,WAAO,IAAP;AACD,GA1CkD,CA4CnD;AACA;;;AACA,MAAI,CAACH,MAAD,IAAW,CAACC,aAAhB,EAA+B;AAC7B,WAAO,IAAP;AACD;;AAED,SAAOF,QAAP;AACD;;GAnDuBD,gB;UACLL,Y,EAKbA,Y,EAGeC,e,EAUnBC,mB;;;KAnBsBG,gB","sourcesContent":["import {useEffect} from 'react'\nimport {useWeb3React} from '@web3-react/core'\n\n// import { injected } from '../../../utils/web3s'\nimport {\n  useEagerConnect,\n  useInactiveListener,\n} from '../../../hooks/useWeb3Network'\nimport {NetworkContextName} from '../../../constants'\nimport {network} from '../../../utils/web3'\n\nexport default function Web3ReactManager({children}) {\n  const {active} = useWeb3React()\n  const {\n    active: networkActive,\n    error: networkError,\n    activate: activateNetwork,\n  } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  useInactiveListener(!triedEager)\n\n  // handle delayed loader state\n  //   const [showLoader, setShowLoader] = useState(false)\n  //   useEffect(() => {\n  //     const timeout = setTimeout(() => {\n  //       setShowLoader(true)\n  //     }, 600)\n\n  //     return () => {\n  //       clearTimeout(timeout)\n  //     }\n  //   }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  //TODO:\n  if (!active && networkError) {\n    return null\n  }\n\n  // if neither context is active, spin\n  //TODO:\n  if (!active && !networkActive) {\n    return null\n  }\n\n  return children\n}\n"]},"metadata":{},"sourceType":"module"}