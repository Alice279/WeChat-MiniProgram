{"ast":null,"code":"var _jsxFileName = \"/Users/alice/Documents/rigel/src/pages/components/ConnectWallet/index.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport { ChainConfig, WalletConfig, SupportedChains } from '../../../constants/chainConfig';\nimport { ConnectWalletModal } from '../../components';\nimport { Button, Tag } from '../../../components';\nimport { TypeConnectWallet } from '../../../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ConnectWallet({\n  size = 'medium',\n  chain,\n  className = '',\n  type,\n  tryActivate,\n  ...props\n}) {\n  _s();\n\n  var _ChainConfig$chain;\n\n  const {\n    t\n  } = useTranslation();\n  const [open, setOpen] = useState(false);\n  const walletConfig = WalletConfig[(_ChainConfig$chain = ChainConfig[chain]) === null || _ChainConfig$chain === void 0 ? void 0 : _ChainConfig$chain.wallet];\n  const walletIcon = walletConfig === null || walletConfig === void 0 ? void 0 : walletConfig.icon(`${className} !w-3 !h-3`);\n\n  const onConnect = () => {\n    setOpen(true);\n    tryActivate();\n  };\n\n  const onClose = () => {\n    setOpen(false);\n  };\n\n  if (!walletConfig) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [size === 'medium' && /*#__PURE__*/_jsxDEV(Tag, {\n      className: className,\n      onClick: onConnect,\n      icon: walletIcon,\n      ...props,\n      children: t('connect')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), size === 'large' && /*#__PURE__*/_jsxDEV(Button, {\n      fullWidth: true,\n      size: \"small\",\n      className: className,\n      onClick: onConnect,\n      variant: \"outlined\",\n      startIcon: walletIcon,\n      ...props,\n      children: `${t('connect')} ${walletConfig === null || walletConfig === void 0 ? void 0 : walletConfig.name}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), open && /*#__PURE__*/_jsxDEV(ConnectWalletModal, {\n      type: type,\n      chain: chain,\n      open: open,\n      onClose: onClose,\n      tryActivate: tryActivate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ConnectWallet, \"DIB1svk2ZrGzkfiQPYOP9c36qlA=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ConnectWallet;\nConnectWallet.propTypes = {\n  size: PropTypes.oneOf(['medium', 'large']).isRequired,\n  chain: PropTypes.oneOf(SupportedChains).isRequired,\n  className: PropTypes.string,\n  type: PropTypes.oneOf(Object.values(TypeConnectWallet)).isRequired,\n  tryActivate: PropTypes.func\n};\nexport default ConnectWallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnectWallet\");","map":{"version":3,"sources":["/Users/alice/Documents/rigel/src/pages/components/ConnectWallet/index.js"],"names":["useState","PropTypes","useTranslation","ChainConfig","WalletConfig","SupportedChains","ConnectWalletModal","Button","Tag","TypeConnectWallet","ConnectWallet","size","chain","className","type","tryActivate","props","t","open","setOpen","walletConfig","wallet","walletIcon","icon","onConnect","onClose","name","propTypes","oneOf","isRequired","string","Object","values","func"],"mappings":"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","sourcesContent":["import {useState} from 'react'\nimport PropTypes from 'prop-types'\nimport {useTranslation} from 'react-i18next'\nimport {\n  ChainConfig,\n  WalletConfig,\n  SupportedChains,\n} from '../../../constants/chainConfig'\nimport {ConnectWalletModal} from '../../components'\nimport {Button, Tag} from '../../../components'\nimport {TypeConnectWallet} from '../../../constants'\n\nfunction ConnectWallet({\n  size = 'medium',\n  chain,\n  className = '',\n  type,\n  tryActivate,\n  ...props\n}) {\n  const {t} = useTranslation()\n  const [open, setOpen] = useState(false)\n  const walletConfig = WalletConfig[ChainConfig[chain]?.wallet]\n  const walletIcon = walletConfig?.icon(`${className} !w-3 !h-3`)\n  const onConnect = () => {\n    setOpen(true)\n    tryActivate()\n  }\n\n  const onClose = () => {\n    setOpen(false)\n  }\n  if (!walletConfig) return null\n  return (\n    <>\n      {size === 'medium' && (\n        <Tag\n          className={className}\n          onClick={onConnect}\n          icon={walletIcon}\n          {...props}\n        >\n          {t('connect')}\n        </Tag>\n      )}\n      {size === 'large' && (\n        <Button\n          fullWidth\n          size=\"small\"\n          className={className}\n          onClick={onConnect}\n          variant=\"outlined\"\n          startIcon={walletIcon}\n          {...props}\n        >\n          {`${t('connect')} ${walletConfig?.name}`}\n        </Button>\n      )}\n      {open && (\n        <ConnectWalletModal\n          type={type}\n          chain={chain}\n          open={open}\n          onClose={onClose}\n          tryActivate={tryActivate}\n        />\n      )}\n    </>\n  )\n}\nConnectWallet.propTypes = {\n  size: PropTypes.oneOf(['medium', 'large']).isRequired,\n  chain: PropTypes.oneOf(SupportedChains).isRequired,\n  className: PropTypes.string,\n  type: PropTypes.oneOf(Object.values(TypeConnectWallet)).isRequired,\n  tryActivate: PropTypes.func,\n}\n\nexport default ConnectWallet\n"]},"metadata":{},"sourceType":"module"}