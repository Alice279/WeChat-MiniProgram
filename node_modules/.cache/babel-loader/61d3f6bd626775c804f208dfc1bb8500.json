{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\n\n/**\n * For the chain based on Ethereum: add one token to MetaMask quickly\n */\nimport { useCallback, useState } from 'react';\nimport { useActiveWeb3React } from './useWeb3Network';\nexport default function useAddTokenToMetamask(token) {\n  _s();\n\n  const {\n    library\n  } = useActiveWeb3React();\n  const [success, setSuccess] = useState();\n  const addToken = useCallback(() => {\n    if (library && library.provider.isMetaMask && library.provider.request && token) {\n      const {\n        address,\n        display_symbol,\n        decimals,\n        icon\n      } = token;\n      library.provider.request({\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20',\n          options: {\n            address,\n            symbol: display_symbol,\n            decimals,\n            image: icon\n          }\n        }\n      }).then(success => {\n        setSuccess(success);\n      }).catch(() => setSuccess(false));\n    } else {\n      setSuccess(false);\n    }\n  }, [Boolean(library), Boolean(library.provider.isMetaMask), Boolean(library.provider.request), token.address]);\n  return {\n    addToken,\n    success\n  };\n}\n\n_s(useAddTokenToMetamask, \"3efQvej0PGISUkE4piiqKUnj7Mw=\", false, function () {\n  return [useActiveWeb3React];\n});","map":{"version":3,"sources":["/Users/alice/Documents/rigel/src/hooks/useAddTokenToMetamask.js"],"names":["useCallback","useState","useActiveWeb3React","useAddTokenToMetamask","token","library","success","setSuccess","addToken","provider","isMetaMask","request","address","display_symbol","decimals","icon","method","params","type","options","symbol","image","then","catch","Boolean"],"mappings":";;AAAA;;AACA;AACA;AACA;AACA,SAAQA,WAAR,EAAqBC,QAArB,QAAoC,OAApC;AACA,SAAQC,kBAAR,QAAiC,kBAAjC;AAEA,eAAe,SAASC,qBAAT,CAA+BC,KAA/B,EAAsC;AAAA;;AACnD,QAAM;AAACC,IAAAA;AAAD,MAAYH,kBAAkB,EAApC;AAEA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,EAAtC;AAEA,QAAMO,QAAQ,GAAGR,WAAW,CAAC,MAAM;AACjC,QACEK,OAAO,IACPA,OAAO,CAACI,QAAR,CAAiBC,UADjB,IAEAL,OAAO,CAACI,QAAR,CAAiBE,OAFjB,IAGAP,KAJF,EAKE;AACA,YAAM;AAACQ,QAAAA,OAAD;AAAUC,QAAAA,cAAV;AAA0BC,QAAAA,QAA1B;AAAoCC,QAAAA;AAApC,UAA4CX,KAAlD;AACAC,MAAAA,OAAO,CAACI,QAAR,CACGE,OADH,CACW;AACPK,QAAAA,MAAM,EAAE,mBADD;AAEPC,QAAAA,MAAM,EAAE;AACNC,UAAAA,IAAI,EAAE,OADA;AAENC,UAAAA,OAAO,EAAE;AACPP,YAAAA,OADO;AAEPQ,YAAAA,MAAM,EAAEP,cAFD;AAGPC,YAAAA,QAHO;AAIPO,YAAAA,KAAK,EAAEN;AAJA;AAFH;AAFD,OADX,EAaGO,IAbH,CAaQhB,OAAO,IAAI;AACfC,QAAAA,UAAU,CAACD,OAAD,CAAV;AACD,OAfH,EAgBGiB,KAhBH,CAgBS,MAAMhB,UAAU,CAAC,KAAD,CAhBzB;AAiBD,KAxBD,MAwBO;AACLA,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GA5B2B,EA4BzB,CACDiB,OAAO,CAACnB,OAAD,CADN,EAEDmB,OAAO,CAACnB,OAAO,CAACI,QAAR,CAAiBC,UAAlB,CAFN,EAGDc,OAAO,CAACnB,OAAO,CAACI,QAAR,CAAiBE,OAAlB,CAHN,EAIDP,KAAK,CAACQ,OAJL,CA5ByB,CAA5B;AAmCA,SAAO;AAACJ,IAAAA,QAAD;AAAWF,IAAAA;AAAX,GAAP;AACD;;GAzCuBH,qB;UACJD,kB","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\n/**\n * For the chain based on Ethereum: add one token to MetaMask quickly\n */\nimport {useCallback, useState} from 'react'\nimport {useActiveWeb3React} from './useWeb3Network'\n\nexport default function useAddTokenToMetamask(token) {\n  const {library} = useActiveWeb3React()\n\n  const [success, setSuccess] = useState()\n\n  const addToken = useCallback(() => {\n    if (\n      library &&\n      library.provider.isMetaMask &&\n      library.provider.request &&\n      token\n    ) {\n      const {address, display_symbol, decimals, icon} = token\n      library.provider\n        .request({\n          method: 'wallet_watchAsset',\n          params: {\n            type: 'ERC20',\n            options: {\n              address,\n              symbol: display_symbol,\n              decimals,\n              image: icon,\n            },\n          },\n        })\n        .then(success => {\n          setSuccess(success)\n        })\n        .catch(() => setSuccess(false))\n    } else {\n      setSuccess(false)\n    }\n  }, [\n    Boolean(library),\n    Boolean(library.provider.isMetaMask),\n    Boolean(library.provider.request),\n    token.address,\n  ])\n\n  return {addToken, success}\n}\n"]},"metadata":{},"sourceType":"module"}