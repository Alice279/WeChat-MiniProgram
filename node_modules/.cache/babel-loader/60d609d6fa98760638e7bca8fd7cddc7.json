{"ast":null,"code":"import { isHexAddress } from '@cfxjs/account';\nimport { validateBase32Address } from '@cfxjs/base32-address';\nimport { validate } from 'bitcoin-address-validation';\nimport { ChainIdCfx, KeyOfCfx, KeyOfBtc } from '../constants/chainConfig';\nimport { getEllipsStr, IS_DEV } from '../utils';\nexport function checkHexAddress(address) {\n  return isHexAddress(address);\n}\nexport function checkCfxTokenAddress(address, type) {\n  return validateBase32Address(address, IS_DEV ? ChainIdCfx.TESTNET : ChainIdCfx.MAINNET, type);\n}\nexport function checkBtcAddress(address) {\n  return validate(address);\n}\nexport function shortenEthAddress(address) {\n  if (!checkHexAddress(address)) return '';\n  return getEllipsStr(address, 6, 4);\n}\nexport function shortenBtcAddress(address) {\n  if (!checkBtcAddress(address)) return '';\n  return getEllipsStr(address, 10, 0);\n}\nexport function shortenCfxAddress(address, type) {\n  if (!checkCfxTokenAddress(address, type)) return '';\n  const arr = address.split(':');\n  const secondStr = getEllipsStr(arr[1], 4, 4);\n  return arr[0] + ':' + secondStr;\n}\nexport function shortenAddress(chain, address, type = 'user') {\n  if (chain === KeyOfCfx) return shortenCfxAddress(address, type);\n  if (chain === KeyOfBtc) return shortenBtcAddress(address);\n  return shortenEthAddress(address);\n}","map":{"version":3,"sources":["/Users/alice/Documents/rigel/src/utils/address.js"],"names":["isHexAddress","validateBase32Address","validate","ChainIdCfx","KeyOfCfx","KeyOfBtc","getEllipsStr","IS_DEV","checkHexAddress","address","checkCfxTokenAddress","type","TESTNET","MAINNET","checkBtcAddress","shortenEthAddress","shortenBtcAddress","shortenCfxAddress","arr","split","secondStr","shortenAddress","chain"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,gBAA3B;AACA,SAAQC,qBAAR,QAAoC,uBAApC;AACA,SAAQC,QAAR,QAAuB,4BAAvB;AACA,SAAQC,UAAR,EAAoBC,QAApB,EAA8BC,QAA9B,QAA6C,0BAA7C;AACA,SAAQC,YAAR,EAAsBC,MAAtB,QAAmC,UAAnC;AAEA,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AACvC,SAAOT,YAAY,CAACS,OAAD,CAAnB;AACD;AAED,OAAO,SAASC,oBAAT,CAA8BD,OAA9B,EAAuCE,IAAvC,EAA6C;AAClD,SAAOV,qBAAqB,CAC1BQ,OAD0B,EAE1BF,MAAM,GAAGJ,UAAU,CAACS,OAAd,GAAwBT,UAAU,CAACU,OAFf,EAG1BF,IAH0B,CAA5B;AAKD;AAED,OAAO,SAASG,eAAT,CAAyBL,OAAzB,EAAkC;AACvC,SAAOP,QAAQ,CAACO,OAAD,CAAf;AACD;AAED,OAAO,SAASM,iBAAT,CAA2BN,OAA3B,EAAoC;AACzC,MAAI,CAACD,eAAe,CAACC,OAAD,CAApB,EAA+B,OAAO,EAAP;AAC/B,SAAOH,YAAY,CAACG,OAAD,EAAU,CAAV,EAAa,CAAb,CAAnB;AACD;AAED,OAAO,SAASO,iBAAT,CAA2BP,OAA3B,EAAoC;AACzC,MAAI,CAACK,eAAe,CAACL,OAAD,CAApB,EAA+B,OAAO,EAAP;AAC/B,SAAOH,YAAY,CAACG,OAAD,EAAU,EAAV,EAAc,CAAd,CAAnB;AACD;AAED,OAAO,SAASQ,iBAAT,CAA2BR,OAA3B,EAAoCE,IAApC,EAA0C;AAC/C,MAAI,CAACD,oBAAoB,CAACD,OAAD,EAAUE,IAAV,CAAzB,EAA0C,OAAO,EAAP;AAC1C,QAAMO,GAAG,GAAGT,OAAO,CAACU,KAAR,CAAc,GAAd,CAAZ;AACA,QAAMC,SAAS,GAAGd,YAAY,CAACY,GAAG,CAAC,CAAD,CAAJ,EAAS,CAAT,EAAY,CAAZ,CAA9B;AACA,SAAOA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAT,GAAeE,SAAtB;AACD;AAED,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAA+Bb,OAA/B,EAAwCE,IAAI,GAAG,MAA/C,EAAuD;AAC5D,MAAIW,KAAK,KAAKlB,QAAd,EAAwB,OAAOa,iBAAiB,CAACR,OAAD,EAAUE,IAAV,CAAxB;AACxB,MAAIW,KAAK,KAAKjB,QAAd,EAAwB,OAAOW,iBAAiB,CAACP,OAAD,CAAxB;AACxB,SAAOM,iBAAiB,CAACN,OAAD,CAAxB;AACD","sourcesContent":["import {isHexAddress} from '@cfxjs/account'\nimport {validateBase32Address} from '@cfxjs/base32-address'\nimport {validate} from 'bitcoin-address-validation'\nimport {ChainIdCfx, KeyOfCfx, KeyOfBtc} from '../constants/chainConfig'\nimport {getEllipsStr, IS_DEV} from '../utils'\n\nexport function checkHexAddress(address) {\n  return isHexAddress(address)\n}\n\nexport function checkCfxTokenAddress(address, type) {\n  return validateBase32Address(\n    address,\n    IS_DEV ? ChainIdCfx.TESTNET : ChainIdCfx.MAINNET,\n    type,\n  )\n}\n\nexport function checkBtcAddress(address) {\n  return validate(address)\n}\n\nexport function shortenEthAddress(address) {\n  if (!checkHexAddress(address)) return ''\n  return getEllipsStr(address, 6, 4)\n}\n\nexport function shortenBtcAddress(address) {\n  if (!checkBtcAddress(address)) return ''\n  return getEllipsStr(address, 10, 0)\n}\n\nexport function shortenCfxAddress(address, type) {\n  if (!checkCfxTokenAddress(address, type)) return ''\n  const arr = address.split(':')\n  const secondStr = getEllipsStr(arr[1], 4, 4)\n  return arr[0] + ':' + secondStr\n}\n\nexport function shortenAddress(chain, address, type = 'user') {\n  if (chain === KeyOfCfx) return shortenCfxAddress(address, type)\n  if (chain === KeyOfBtc) return shortenBtcAddress(address)\n  return shortenEthAddress(address)\n}\n"]},"metadata":{},"sourceType":"module"}