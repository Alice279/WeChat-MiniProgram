{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useConfluxPortal;\n\nvar _react = require(\"react\");\n\nvar _reactUse = require(\"react-use\");\n\nvar _ = require(\"./\");\n\nfunction openHomePage() {\n  window.open(\"https://portal.confluxnetwork.org\");\n}\n\nfunction validAddresses(addresses) {\n  return Array.isArray(addresses) && addresses.length;\n}\n\nconst isPortalInstalled = () => {\n  var _window, _window$conflux;\n\n  return (_window = window) === null || _window === void 0 ? void 0 : (_window$conflux = _window.conflux) === null || _window$conflux === void 0 ? void 0 : _window$conflux.isConfluxPortal;\n};\n\nfunction useConfluxPortal(tokenAddrs = []) {\n  var _window6, _window7;\n\n  (0, _.useConfluxJSDefined)(); // prevent portal auto refresh when user changes the network\n\n  if (window && window.conflux && window.conflux.autoRefreshOnNetworkChange) window.conflux.autoRefreshOnNetworkChange = false;\n  if (!window.conflux && window.localStorage.getItem(\"CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE\")) window.localStorage.removeItem(\"CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE\");\n  const [address, setAddress] = (0, _react.useState)( // NOTE: if portal is installed, there must be window.conflux here\n  window.conflux ? window.localStorage.getItem(\"CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE\") || undefined : null);\n  const {\n    chainId,\n    networkId\n  } = (0, _.useChainNetId)();\n  const [error, setError] = (0, _react.useState)(null);\n  (0, _reactUse.useEffectOnce)(() => {\n    var _window2, _window2$conflux;\n\n    (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$conflux = _window2.conflux) === null || _window2$conflux === void 0 ? void 0 : _window2$conflux.send({\n      method: \"cfx_accounts\"\n    }).then(accounts => {\n      if (validAddresses(accounts)) {\n        setAddress(accounts[0]);\n        window.localStorage.setItem(\"CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE\", accounts[0]);\n      } else {\n        window.localStorage.removeItem(\"CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE\");\n        setAddress(null);\n      }\n    });\n  });\n\n  const login = async fallbackFn => {\n    var _window3;\n\n    if (!((_window3 = window) === null || _window3 === void 0 ? void 0 : _window3.conflux)) return;\n    const hasAddr = !!address && (await window.conflux.send('cfx_accounts')).length;\n    if (hasAddr) return typeof fallbackFn === 'function' ? fallbackFn() : undefined;\n    return window.conflux.send('cfx_requestAccounts').then(addresses => validAddresses(addresses) && setAddress(addresses[0])).catch(error => setError(error));\n    return typeof fallbackFn === \"function\" && fallbackFn();\n  };\n\n  const useEnsurePortalLogin = () => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    (0, _reactUse.useEffectOnce)(login);\n  };\n\n  const [balance, tokenBalances] = (0, _.useBalance)(address, tokenAddrs); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  (0, _reactUse.useEffectOnce)(() => {\n    var _window4, _window4$conflux;\n\n    const accountListener = newAccounts => {\n      if (validAddresses(newAccounts)) {\n        window.localStorage.setItem(\"CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE\", newAccounts[0]);\n        setAddress(newAccounts[0]);\n      } else {\n        if (address !== null) setAddress(null);\n        window.localStorage.removeItem(\"CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE\");\n      }\n    };\n\n    (_window4 = window) === null || _window4 === void 0 ? void 0 : (_window4$conflux = _window4.conflux) === null || _window4$conflux === void 0 ? void 0 : _window4$conflux.on(\"accountsChanged\", accountListener);\n    return () => {\n      var _window5, _window5$conflux;\n\n      (_window5 = window) === null || _window5 === void 0 ? void 0 : (_window5$conflux = _window5.conflux) === null || _window5$conflux === void 0 ? void 0 : _window5$conflux.off(\"accountsChanged\", accountListener);\n    };\n  });\n  return {\n    portalInstalled: Boolean(isPortalInstalled()),\n    address,\n    balances: [balance, tokenBalances],\n    networkId,\n    chainId,\n    error,\n    login,\n    useEnsurePortalLogin,\n    conflux: (_window6 = window) === null || _window6 === void 0 ? void 0 : _window6.conflux,\n    confluxJS: (_window7 = window) === null || _window7 === void 0 ? void 0 : _window7.confluxJS\n  };\n}\n\nuseConfluxPortal.openHomePage = openHomePage;","map":{"version":3,"sources":["../src/useConfluxPortal.js"],"names":["window","Array","addresses","isPortalInstalled","tokenAddrs","networkId","method","accounts","validAddresses","setAddress","login","hasAddr","fallbackFn","error","setError","useEnsurePortalLogin","accountListener","newAccounts","address","portalInstalled","Boolean","balances","conflux","confluxJS","useConfluxPortal"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { useEffectOnce } from \"react-use\";\nimport { useConfluxJSDefined, useSWR } from \"./\";\nimport { useBalance } from \"./\";\nimport { useChainNetId } from './';\n\nfunction openHomePage() {\n  window.open(\"https://portal.confluxnetwork.org\");\n}\n\nfunction validAddresses(addresses) {\n  return Array.isArray(addresses) && addresses.length;\n}\n\nconst isPortalInstalled = () => window?.conflux?.isConfluxPortal;\n\nexport default function useConfluxPortal(tokenAddrs = []) {\n  useConfluxJSDefined();\n\n  // prevent portal auto refresh when user changes the network\n  if (window && window.conflux && window.conflux.autoRefreshOnNetworkChange)\n    window.conflux.autoRefreshOnNetworkChange = false;\n\n  if (\n    !window.conflux &&\n    window.localStorage.getItem(\"CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE\")\n  )\n    window.localStorage.removeItem(\"CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE\");\n\n  const [address, setAddress] = useState(\n    // NOTE: if portal is installed, there must be window.conflux here\n    window.conflux\n      ? window.localStorage.getItem(\"CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE\") ||\n      undefined\n      : null\n  );\n\n  const { chainId, networkId } = useChainNetId()\n  const [error, setError] = useState(null)\n\n  useEffectOnce(() => {\n    window?.conflux?.send({ method: \"cfx_accounts\" }).then((accounts) => {\n      if (validAddresses(accounts)) {\n        setAddress(accounts[0]);\n        window.localStorage.setItem(\n          \"CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE\",\n          accounts[0]\n        );\n      } else {\n        window.localStorage.removeItem(\"CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE\");\n        setAddress(null);\n      }\n    });\n  });\n\n  const login = async (fallbackFn) => {\n    if (!window?.conflux) return\n    const hasAddr = !!address && (await window.conflux.send('cfx_accounts')).length\n    if (hasAddr) return typeof fallbackFn === 'function' ? fallbackFn() : undefined\n    return window.conflux\n      .send('cfx_requestAccounts')\n      .then(\n        (addresses) => validAddresses(addresses) && setAddress(addresses[0])\n      )\n      .catch(\n        (error) => setError(error)\n      )\n    return typeof fallbackFn === \"function\" && fallbackFn();\n  };\n\n  const useEnsurePortalLogin = () => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffectOnce(login);\n  };\n\n  const [balance, tokenBalances] = useBalance(address, tokenAddrs);\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  useEffectOnce(() => {\n    const accountListener = (newAccounts) => {\n      if (validAddresses(newAccounts)) {\n        window.localStorage.setItem(\n          \"CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE\",\n          newAccounts[0]\n        );\n        setAddress(newAccounts[0]);\n      } else {\n        if (address !== null) setAddress(null);\n        window.localStorage.removeItem(\"CFXJS_REACT_HOOK_PORTAL_ADDRESS_CACHE\");\n      }\n    };\n    window?.conflux?.on(\"accountsChanged\", accountListener);\n    return () => {\n      window?.conflux?.off(\"accountsChanged\", accountListener);\n    };\n  });\n\n  return {\n    portalInstalled: Boolean(isPortalInstalled()),\n    address,\n    balances: [balance, tokenBalances],\n    networkId,\n    chainId,\n    error,\n    login,\n    useEnsurePortalLogin,\n    conflux: window?.conflux,\n    confluxJS: window?.confluxJS,\n  };\n}\n\nuseConfluxPortal.openHomePage = openHomePage;\n"]},"metadata":{},"sourceType":"script"}