{"ast":null,"code":"import { ChainConfig, KeyOfCfx } from '../constants/chainConfig';\nimport Big from 'big.js';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { BigNumZero } from '../constants';\nimport { checkCfxTokenAddress } from './address';\nexport const IS_DEV = window.location.hostname === 'localhost' || window.location.hostname.indexOf('test') > -1;\nexport const getEllipsStr = (str, frontNum, endNum) => {\n  if (str) {\n    const length = str.length;\n\n    if (endNum === 0 && length <= frontNum) {\n      return str.substring(0, frontNum);\n    }\n\n    return str.substring(0, frontNum) + '...' + str.substring(length - endNum, length);\n  }\n\n  return '';\n};\nexport const getMaxAmount = (chain, amount) => {\n  var _ChainConfig$chain;\n\n  const remainderAmount = (_ChainConfig$chain = ChainConfig[chain]) === null || _ChainConfig$chain === void 0 ? void 0 : _ChainConfig$chain.remainderAmount;\n  let amountBig = new Big(amount);\n\n  if (amountBig.gt(remainderAmount)) {\n    return amountBig.minus(remainderAmount);\n  } else {\n    return BigNumZero;\n  }\n}; // add 10%\n\nexport function calculateGasMargin(value) {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000));\n}\nexport function getExponent(decimals) {\n  return `1e${decimals}`;\n}\nexport function getChainIdRight(chain, chainId, address, addrType = 'user') {\n  const {\n    wallet,\n    supportedChainIds\n  } = ChainConfig[chain] || {};\n  const isCfxChain = chain === KeyOfCfx;\n\n  if (isCfxChain) {\n    return wallet && chainId == (supportedChainIds === null || supportedChainIds === void 0 ? void 0 : supportedChainIds[IS_DEV ? 'TESTNET' : 'MAINNET']) && checkCfxTokenAddress(address, addrType);\n  }\n\n  return wallet && chainId == (supportedChainIds === null || supportedChainIds === void 0 ? void 0 : supportedChainIds[IS_DEV ? 'TESTNET' : 'MAINNET']);\n}","map":{"version":3,"sources":["/Users/alice/Documents/rigel/src/utils/index.js"],"names":["ChainConfig","KeyOfCfx","Big","BigNumber","BigNumZero","checkCfxTokenAddress","IS_DEV","window","location","hostname","indexOf","getEllipsStr","str","frontNum","endNum","length","substring","getMaxAmount","chain","amount","remainderAmount","amountBig","gt","minus","calculateGasMargin","value","mul","from","add","div","getExponent","decimals","getChainIdRight","chainId","address","addrType","wallet","supportedChainIds","isCfxChain"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,QAArB,QAAoC,0BAApC;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAAQC,SAAR,QAAwB,0BAAxB;AACA,SAAQC,UAAR,QAAyB,cAAzB;AACA,SAAQC,oBAAR,QAAmC,WAAnC;AAEA,OAAO,MAAMC,MAAM,GACjBC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,WAA7B,IACAF,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,OAAzB,CAAiC,MAAjC,IAA2C,CAAC,CAFvC;AAIP,OAAO,MAAMC,YAAY,GAAG,CAACC,GAAD,EAAMC,QAAN,EAAgBC,MAAhB,KAA2B;AACrD,MAAIF,GAAJ,EAAS;AACP,UAAMG,MAAM,GAAGH,GAAG,CAACG,MAAnB;;AACA,QAAID,MAAM,KAAK,CAAX,IAAgBC,MAAM,IAAIF,QAA9B,EAAwC;AACtC,aAAOD,GAAG,CAACI,SAAJ,CAAc,CAAd,EAAiBH,QAAjB,CAAP;AACD;;AACD,WACED,GAAG,CAACI,SAAJ,CAAc,CAAd,EAAiBH,QAAjB,IACA,KADA,GAEAD,GAAG,CAACI,SAAJ,CAAcD,MAAM,GAAGD,MAAvB,EAA+BC,MAA/B,CAHF;AAKD;;AACD,SAAO,EAAP;AACD,CAbM;AAeP,OAAO,MAAME,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAAA;;AAC7C,QAAMC,eAAe,yBAAGpB,WAAW,CAACkB,KAAD,CAAd,uDAAG,mBAAoBE,eAA5C;AACA,MAAIC,SAAS,GAAG,IAAInB,GAAJ,CAAQiB,MAAR,CAAhB;;AACA,MAAIE,SAAS,CAACC,EAAV,CAAaF,eAAb,CAAJ,EAAmC;AACjC,WAAOC,SAAS,CAACE,KAAV,CAAgBH,eAAhB,CAAP;AACD,GAFD,MAEO;AACL,WAAOhB,UAAP;AACD;AACF,CARM,C,CAUP;;AACA,OAAO,SAASoB,kBAAT,CAA4BC,KAA5B,EAAmC;AACxC,SAAOA,KAAK,CACTC,GADI,CACAvB,SAAS,CAACwB,IAAV,CAAe,KAAf,EAAsBC,GAAtB,CAA0BzB,SAAS,CAACwB,IAAV,CAAe,IAAf,CAA1B,CADA,EAEJE,GAFI,CAEA1B,SAAS,CAACwB,IAAV,CAAe,KAAf,CAFA,CAAP;AAGD;AAED,OAAO,SAASG,WAAT,CAAqBC,QAArB,EAA+B;AACpC,SAAQ,KAAIA,QAAS,EAArB;AACD;AAED,OAAO,SAASC,eAAT,CAAyBd,KAAzB,EAAgCe,OAAhC,EAAyCC,OAAzC,EAAkDC,QAAQ,GAAG,MAA7D,EAAqE;AAC1E,QAAM;AAACC,IAAAA,MAAD;AAASC,IAAAA;AAAT,MAA8BrC,WAAW,CAACkB,KAAD,CAAX,IAAsB,EAA1D;AACA,QAAMoB,UAAU,GAAGpB,KAAK,KAAKjB,QAA7B;;AAEA,MAAIqC,UAAJ,EAAgB;AACd,WACEF,MAAM,IACNH,OAAO,KAAII,iBAAJ,aAAIA,iBAAJ,uBAAIA,iBAAiB,CAAG/B,MAAM,GAAG,SAAH,GAAe,SAAxB,CAArB,CADP,IAEAD,oBAAoB,CAAC6B,OAAD,EAAUC,QAAV,CAHtB;AAKD;;AAED,SACEC,MAAM,IAAIH,OAAO,KAAII,iBAAJ,aAAIA,iBAAJ,uBAAIA,iBAAiB,CAAG/B,MAAM,GAAG,SAAH,GAAe,SAAxB,CAArB,CADnB;AAGD","sourcesContent":["import {ChainConfig, KeyOfCfx} from '../constants/chainConfig'\nimport Big from 'big.js'\nimport {BigNumber} from '@ethersproject/bignumber'\nimport {BigNumZero} from '../constants'\nimport {checkCfxTokenAddress} from './address'\n\nexport const IS_DEV =\n  window.location.hostname === 'localhost' ||\n  window.location.hostname.indexOf('test') > -1\n\nexport const getEllipsStr = (str, frontNum, endNum) => {\n  if (str) {\n    const length = str.length\n    if (endNum === 0 && length <= frontNum) {\n      return str.substring(0, frontNum)\n    }\n    return (\n      str.substring(0, frontNum) +\n      '...' +\n      str.substring(length - endNum, length)\n    )\n  }\n  return ''\n}\n\nexport const getMaxAmount = (chain, amount) => {\n  const remainderAmount = ChainConfig[chain]?.remainderAmount\n  let amountBig = new Big(amount)\n  if (amountBig.gt(remainderAmount)) {\n    return amountBig.minus(remainderAmount)\n  } else {\n    return BigNumZero\n  }\n}\n\n// add 10%\nexport function calculateGasMargin(value) {\n  return value\n    .mul(BigNumber.from(10000).add(BigNumber.from(1000)))\n    .div(BigNumber.from(10000))\n}\n\nexport function getExponent(decimals) {\n  return `1e${decimals}`\n}\n\nexport function getChainIdRight(chain, chainId, address, addrType = 'user') {\n  const {wallet, supportedChainIds} = ChainConfig[chain] || {}\n  const isCfxChain = chain === KeyOfCfx\n\n  if (isCfxChain) {\n    return (\n      wallet &&\n      chainId == supportedChainIds?.[IS_DEV ? 'TESTNET' : 'MAINNET'] &&\n      checkCfxTokenAddress(address, addrType)\n    )\n  }\n\n  return (\n    wallet && chainId == supportedChainIds?.[IS_DEV ? 'TESTNET' : 'MAINNET']\n  )\n}\n"]},"metadata":{},"sourceType":"module"}