{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useMemo, useState, useCallback } from 'react';\nimport { useEffectOnce } from 'react-use';\nimport { useBalance as usePortalBalance } from '@cfxjs/react-hooks';\nimport { ERC20_ABI } from '../abi';\nimport { KeyOfCfx } from '../constants/chainConfig';\nimport { BigNumZero, TypeConnectWallet } from '../constants';\nimport { getChainIdRight } from '../utils';\nimport { checkCfxTokenAddress } from '../utils/address';\n\nfunction validAccounts(accounts) {\n  return Array.isArray(accounts) && accounts.length;\n}\n\nconst isPortalInstalled = () => {\n  var _window, _window$conflux;\n\n  return (_window = window) === null || _window === void 0 ? void 0 : (_window$conflux = _window.conflux) === null || _window$conflux === void 0 ? void 0 : _window$conflux.isConfluxPortal;\n};\n\nfunction useChainNetId() {\n  _s();\n\n  var _window2, _window2$conflux;\n\n  const [chainId, setChainid] = useState((_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$conflux = _window2.conflux) === null || _window2$conflux === void 0 ? void 0 : _window2$conflux.chainId);\n  useEffectOnce(() => {\n    var _window3, _window3$conflux;\n\n    const chainListener = newChainId => {\n      if (newChainId !== '0xNaN' && newChainId !== chainId) {\n        setChainid(chainId);\n      }\n    };\n\n    (_window3 = window) === null || _window3 === void 0 ? void 0 : (_window3$conflux = _window3.conflux) === null || _window3$conflux === void 0 ? void 0 : _window3$conflux.on('chainIdChanged', chainListener);\n    return () => {\n      var _window4, _window4$conflux;\n\n      (_window4 = window) === null || _window4 === void 0 ? void 0 : (_window4$conflux = _window4.conflux) === null || _window4$conflux === void 0 ? void 0 : _window4$conflux.off('chainIdChanged', chainListener);\n    };\n  });\n  return {\n    chainId\n  };\n}\n\n_s(useChainNetId, \"uLAPVGeBp5QcROsG4ZhCFz4PXs4=\", false, function () {\n  return [useEffectOnce];\n});\n\nexport function useConnect() {\n  _s2();\n\n  const [address, setAddress] = useState(null);\n  const [error, setError] = useState(null);\n  const {\n    chainId\n  } = useChainNetId();\n  const portalInstalled = isPortalInstalled();\n  const [type, setType] = useState(portalInstalled ? TypeConnectWallet.uninstalled : TypeConnectWallet.success);\n  if (window && window.conflux && window.conflux.autoRefreshOnNetworkChange) window.conflux.autoRefreshOnNetworkChange = false;\n  useEffectOnce(() => {\n    var _window5, _window5$conflux;\n\n    (_window5 = window) === null || _window5 === void 0 ? void 0 : (_window5$conflux = _window5.conflux) === null || _window5$conflux === void 0 ? void 0 : _window5$conflux.send('cfx_accounts').then(accounts => {\n      if (validAccounts(accounts) && accounts[0] !== address) {\n        setAddress(accounts[0]);\n      }\n    }).catch(error => setError(error));\n  });\n  useEffectOnce(() => {\n    var _window6, _window6$conflux;\n\n    // listen when account change\n    const accountsLinstener = accounts => {\n      if (validAccounts(accounts) && accounts[0] !== address) {\n        setAddress(accounts[0]);\n      }\n\n      if (accounts.length === 0) {\n        setAddress(null);\n      }\n    };\n\n    (_window6 = window) === null || _window6 === void 0 ? void 0 : (_window6$conflux = _window6.conflux) === null || _window6$conflux === void 0 ? void 0 : _window6$conflux.on('accountsChanged', accountsLinstener);\n    return () => {\n      var _window7, _window7$conflux, _window7$conflux$off;\n\n      (_window7 = window) === null || _window7 === void 0 ? void 0 : (_window7$conflux = _window7.conflux) === null || _window7$conflux === void 0 ? void 0 : (_window7$conflux$off = _window7$conflux.off) === null || _window7$conflux$off === void 0 ? void 0 : _window7$conflux$off.call(_window7$conflux, 'accountsChanged', accountsLinstener);\n    };\n  });\n  const login = useCallback(() => {\n    setType(TypeConnectWallet.loading);\n\n    if (!address) {\n      var _window8;\n\n      if ((_window8 = window) === null || _window8 === void 0 ? void 0 : _window8.conflux) window.conflux.send('cfx_requestAccounts').then(accounts => {\n        setType(TypeConnectWallet.success);\n\n        if (validAccounts(accounts)) {\n          setAddress(accounts[0]);\n        }\n      }).catch(err => {\n        setType(TypeConnectWallet.error);\n        setError(err);\n\n        if (err.code === 4001) {\n          // EIP-1193 userRejectedRequest error\n          // If this happens, the user rejected the connection request.\n          console.error('Please connect to ConfluxPortal.');\n        } else {\n          console.error(err);\n        }\n      });\n    }\n  }, [address]);\n  return {\n    type,\n    tryActivate: login,\n    error,\n    address,\n    chainId\n  };\n}\n\n_s2(useConnect, \"e9Z2rF4ZRWY2gNm1eX+Z9+sug7c=\", false, function () {\n  return [useChainNetId, useEffectOnce, useEffectOnce];\n});\n\nexport function useContract(address, ABI) {\n  _s3();\n\n  var _window9;\n\n  const confluxJS = (_window9 = window) === null || _window9 === void 0 ? void 0 : _window9.confluxJS;\n  const {\n    chainId\n  } = useConnect(KeyOfCfx);\n  const isChainIdRight = getChainIdRight(KeyOfCfx, chainId, address, 'contract') || !address;\n  return useMemo(() => {\n    if (!ABI || !confluxJS || !isChainIdRight) return null;\n\n    try {\n      return confluxJS.Contract({\n        abi: ABI,\n        address\n      });\n    } catch (error) {\n      return null;\n    }\n  }, [address, Boolean(confluxJS)], isChainIdRight);\n}\n\n_s3(useContract, \"kiASukgb5Hwhypcy2owZkm3lX+M=\", false, function () {\n  return [useConnect];\n});\n\nexport function useTokenContract(tokenAddress) {\n  _s4();\n\n  return useContract(tokenAddress || '', ERC20_ABI);\n}\n/**\n * get CFX balance from Conflux Network\n * @returns balance of account\n */\n\n_s4(useTokenContract, \"OieRxpBRupXKKSB/Daj7yBGbdgo=\", false, function () {\n  return [useContract];\n});\n\nexport function useNativeTokenBalance(address) {\n  _s5();\n\n  const [balance] = usePortalBalance(address, []);\n  return balance ? balance : BigNumZero;\n}\n\n_s5(useNativeTokenBalance, \"5/9pNQjNHCV5zPtAGcBz5K3V8lg=\", false, function () {\n  return [usePortalBalance];\n});\n\nexport function useTokenBalance(address, tokenAddress) {\n  _s6();\n\n  // eslint-disable-next-line no-unused-vars\n  const [balance, tokenBalance] = usePortalBalance(address, tokenAddress && checkCfxTokenAddress(tokenAddress, 'contract') ? [tokenAddress] : []);\n  return tokenBalance ? tokenBalance : BigNumZero;\n}\n\n_s6(useTokenBalance, \"iqqyZLsKXd9IYrGalaMDYV69B98=\", false, function () {\n  return [usePortalBalance];\n});\n\nexport function useBalance(address, tokenAddress) {\n  _s7();\n\n  const isNativeToken = !checkCfxTokenAddress(tokenAddress, 'contract');\n  const tokenBalance = useTokenBalance(address, tokenAddress) || BigNumZero;\n  const nativeTokenBalance = useNativeTokenBalance(address) || BigNumZero;\n  return isNativeToken ? nativeTokenBalance : tokenBalance;\n}\n\n_s7(useBalance, \"3jg+U9xrTVLX1CSYByhrcSMQDtc=\", false, function () {\n  return [useTokenBalance, useNativeTokenBalance];\n});","map":{"version":3,"sources":["/Users/alice/Documents/rigel/src/hooks/usePortal.js"],"names":["useMemo","useState","useCallback","useEffectOnce","useBalance","usePortalBalance","ERC20_ABI","KeyOfCfx","BigNumZero","TypeConnectWallet","getChainIdRight","checkCfxTokenAddress","validAccounts","accounts","Array","isArray","length","isPortalInstalled","window","conflux","isConfluxPortal","useChainNetId","chainId","setChainid","chainListener","newChainId","on","off","useConnect","address","setAddress","error","setError","portalInstalled","type","setType","uninstalled","success","autoRefreshOnNetworkChange","send","then","catch","accountsLinstener","login","loading","err","code","console","tryActivate","useContract","ABI","confluxJS","isChainIdRight","Contract","abi","Boolean","useTokenContract","tokenAddress","useNativeTokenBalance","balance","useTokenBalance","tokenBalance","isNativeToken","nativeTokenBalance"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport {useMemo, useState, useCallback} from 'react'\nimport {useEffectOnce} from 'react-use'\nimport {useBalance as usePortalBalance} from '@cfxjs/react-hooks'\nimport {ERC20_ABI} from '../abi'\nimport {KeyOfCfx} from '../constants/chainConfig'\nimport {BigNumZero, TypeConnectWallet} from '../constants'\nimport {getChainIdRight} from '../utils'\nimport {checkCfxTokenAddress} from '../utils/address'\n\nfunction validAccounts(accounts) {\n  return Array.isArray(accounts) && accounts.length\n}\n\nconst isPortalInstalled = () => window?.conflux?.isConfluxPortal\n\nfunction useChainNetId() {\n  const [chainId, setChainid] = useState(window?.conflux?.chainId)\n\n  useEffectOnce(() => {\n    const chainListener = newChainId => {\n      if (newChainId !== '0xNaN' && newChainId !== chainId) {\n        setChainid(chainId)\n      }\n    }\n    window?.conflux?.on('chainIdChanged', chainListener)\n    return () => {\n      window?.conflux?.off('chainIdChanged', chainListener)\n    }\n  })\n  return {chainId}\n}\n\nexport function useConnect() {\n  const [address, setAddress] = useState(null)\n  const [error, setError] = useState(null)\n  const {chainId} = useChainNetId()\n  const portalInstalled = isPortalInstalled()\n  const [type, setType] = useState(\n    portalInstalled ? TypeConnectWallet.uninstalled : TypeConnectWallet.success,\n  )\n\n  if (window && window.conflux && window.conflux.autoRefreshOnNetworkChange)\n    window.conflux.autoRefreshOnNetworkChange = false\n\n  useEffectOnce(() => {\n    window?.conflux\n      ?.send('cfx_accounts')\n      .then(accounts => {\n        if (validAccounts(accounts) && accounts[0] !== address) {\n          setAddress(accounts[0])\n        }\n      })\n      .catch(error => setError(error))\n  })\n\n  useEffectOnce(() => {\n    // listen when account change\n    const accountsLinstener = accounts => {\n      if (validAccounts(accounts) && accounts[0] !== address) {\n        setAddress(accounts[0])\n      }\n      if (accounts.length === 0) {\n        setAddress(null)\n      }\n    }\n\n    window?.conflux?.on('accountsChanged', accountsLinstener)\n    return () => {\n      window?.conflux?.off?.('accountsChanged', accountsLinstener)\n    }\n  })\n\n  const login = useCallback(() => {\n    setType(TypeConnectWallet.loading)\n    if (!address) {\n      if (window?.conflux)\n        window.conflux\n          .send('cfx_requestAccounts')\n          .then(accounts => {\n            setType(TypeConnectWallet.success)\n            if (validAccounts(accounts)) {\n              setAddress(accounts[0])\n            }\n          })\n          .catch(err => {\n            setType(TypeConnectWallet.error)\n            setError(err)\n            if (err.code === 4001) {\n              // EIP-1193 userRejectedRequest error\n              // If this happens, the user rejected the connection request.\n              console.error('Please connect to ConfluxPortal.')\n            } else {\n              console.error(err)\n            }\n          })\n    }\n  }, [address])\n\n  return {\n    type,\n    tryActivate: login,\n    error,\n    address,\n    chainId,\n  }\n}\n\nexport function useContract(address, ABI) {\n  const confluxJS = window?.confluxJS\n  const {chainId} = useConnect(KeyOfCfx)\n  const isChainIdRight =\n    getChainIdRight(KeyOfCfx, chainId, address, 'contract') || !address\n  return useMemo(\n    () => {\n      if (!ABI || !confluxJS || !isChainIdRight) return null\n      try {\n        return confluxJS.Contract({abi: ABI, address})\n      } catch (error) {\n        return null\n      }\n    },\n    [address, Boolean(confluxJS)],\n    isChainIdRight,\n  )\n}\n\nexport function useTokenContract(tokenAddress) {\n  return useContract(tokenAddress || '', ERC20_ABI)\n}\n\n/**\n * get CFX balance from Conflux Network\n * @returns balance of account\n */\nexport function useNativeTokenBalance(address) {\n  const [balance] = usePortalBalance(address, [])\n  return balance ? balance : BigNumZero\n}\n\nexport function useTokenBalance(address, tokenAddress) {\n  // eslint-disable-next-line no-unused-vars\n  const [balance, tokenBalance] = usePortalBalance(\n    address,\n    tokenAddress && checkCfxTokenAddress(tokenAddress, 'contract')\n      ? [tokenAddress]\n      : [],\n  )\n  return tokenBalance ? tokenBalance : BigNumZero\n}\n\nexport function useBalance(address, tokenAddress) {\n  const isNativeToken = !checkCfxTokenAddress(tokenAddress, 'contract')\n  const tokenBalance = useTokenBalance(address, tokenAddress) || BigNumZero\n  const nativeTokenBalance = useNativeTokenBalance(address) || BigNumZero\n  return isNativeToken ? nativeTokenBalance : tokenBalance\n}\n"]},"metadata":{},"sourceType":"module"}